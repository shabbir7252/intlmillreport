//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ImillReports.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class IMILLEntities : DbContext
    {
        public IMILLEntities()
            : base("name=IMILLEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<GL_Ledger> GL_Ledger { get; set; }
        public virtual DbSet<ICS_Item> ICS_Item { get; set; }
        public virtual DbSet<ICS_Item_Unit_Details> ICS_Item_Unit_Details { get; set; }
        public virtual DbSet<ICS_Transaction> ICS_Transaction { get; set; }
        public virtual DbSet<ICS_Transaction_Details> ICS_Transaction_Details { get; set; }
        public virtual DbSet<ICS_Transaction_Types> ICS_Transaction_Types { get; set; }
        public virtual DbSet<ICS_Unit> ICS_Unit { get; set; }
        public virtual DbSet<SM_Location> SM_Location { get; set; }
        public virtual DbSet<SM_SALESMAN> SM_SALESMAN { get; set; }
        public virtual DbSet<intlmill_cash_register> intlmill_cash_register { get; set; }
        public virtual DbSet<ICS_Item_Group> ICS_Item_Group { get; set; }
    
        public virtual ObjectResult<spIUD_GetAll_Result> spIUD_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spIUD_GetAll_Result>("spIUD_GetAll");
        }
    
        public virtual ObjectResult<spICSTrans_GetAll_Result> spICSTrans_GetAll(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string locationArray, string voucherTypeArray, Nullable<System.DateTime> fromHoDate, Nullable<System.DateTime> toHoDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var locationArrayParameter = locationArray != null ?
                new ObjectParameter("locationArray", locationArray) :
                new ObjectParameter("locationArray", typeof(string));
    
            var voucherTypeArrayParameter = voucherTypeArray != null ?
                new ObjectParameter("voucherTypeArray", voucherTypeArray) :
                new ObjectParameter("voucherTypeArray", typeof(string));
    
            var fromHoDateParameter = fromHoDate.HasValue ?
                new ObjectParameter("fromHoDate", fromHoDate) :
                new ObjectParameter("fromHoDate", typeof(System.DateTime));
    
            var toHoDateParameter = toHoDate.HasValue ?
                new ObjectParameter("toHoDate", toHoDate) :
                new ObjectParameter("toHoDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spICSTrans_GetAll_Result>("spICSTrans_GetAll", fromDateParameter, toDateParameter, locationArrayParameter, voucherTypeArrayParameter, fromHoDateParameter, toHoDateParameter);
        }
    
        public virtual ObjectResult<spICSTransDetail_GetAll_Result> spICSTransDetail_GetAll(string intArray, string prodArray)
        {
            var intArrayParameter = intArray != null ?
                new ObjectParameter("intArray", intArray) :
                new ObjectParameter("intArray", typeof(string));
    
            var prodArrayParameter = prodArray != null ?
                new ObjectParameter("prodArray", prodArray) :
                new ObjectParameter("prodArray", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spICSTransDetail_GetAll_Result>("spICSTransDetail_GetAll", intArrayParameter, prodArrayParameter);
        }
    }
}
