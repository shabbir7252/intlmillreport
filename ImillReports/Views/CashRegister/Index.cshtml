
@{
    ViewBag.Title = "Cash Register Report";
    ViewBag.SubTitle = "All transactions of cash register as report";
    var checkboxVal = ViewBag.takeCount == true ? "true" : "false";
}

<style>
    .e-grid .e-rowcell.customcss {
        font-size: 11px;
    }

    .e-grid .e-headercell.customcss {
        font-size: 11px;
    }

    .e-grid .e-summaryrow .e-summarycell, .e-grid .e-summaryrow .e-templatecell {
        font-size: 11px;
    }

    .e-headertext {
        font-size: 11px;
    }
</style>

@Html.EJS().Toast("success-toast").Position(p => p.X("Center")).NewestOnTop(true).ShowCloseButton(true).ShowProgressBar(true).CssClass("e-toast-success").Icon("e-success toast-icons").Title("Record Updated").Content("Record is verified and Updated").Render()
@Html.EJS().Toast("error-toast").Position(p => p.X("Center")).NewestOnTop(true).ShowCloseButton(true).ShowProgressBar(true).CssClass("e-toast-danger").Icon("e-error toast-icons").Title("Updating Failed").Content("Record could not be saved! Please try again by refereshing page").Render()
@Html.EJS().Toast("info-toast").Position(p => p.X("Center")).NewestOnTop(true).ShowCloseButton(true).ShowProgressBar(true).CssClass("e-toast-info").Icon("e-info toast-icons").Title("Information!").Content("Please select or deselect atleast 1 value").Render()

<div class="container-fluid">
    @if (ViewBag.validation == "true")
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-danger alert-dismissible" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>
                    Start Date is Greater then End Date
                </div>
            </div>
        </div>
    }
    <div class="row clearfix">
        <div class="col-12">
            <div class="card">
                @using (Html.BeginForm("Index", "CashRegister", FormMethod.Get))
                {
                    <div class="row p-3">
                        <div class="col-2">
                            @Html.EJS().DatePicker("fromDate").Format("dd/MMM/yyyy").Value(ViewBag.startDate).Render()
                        </div>
                        <div class="col-2">
                            @Html.EJS().DatePicker("toDate").Format("dd/MMM/yyyy").Value(ViewBag.endDate).Render()
                        </div>

                        <div class="col-2">
                            @Html.EJS().CheckBox("takeCount").Name("takeCount").Value("true").Label("Shift Count").Checked(ViewBag.takeCount).Render()
                        </div>

                        <div class="col-2">
                            <button type="submit" class="btn btn-raised bg-black waves-effect waves-light">Get Records</button>
                            @*<button type="button" class="btn btn-raised bg-black waves-effect waves-light getRecords">Get Records</button>*@
                        </div>
                    </div>
                }
            </div>
            <div class="card mt-3">

                <div class="row">
                    <div class="col-2 mt-3 ml-4">
                        <button type="button" onclick="Verify()" class="btn btn-raised bg-amber waves-effect waves-light">Verify</button>
                    </div>
                </div>

                <div class="body">

                    <div class="preloader loading">
                        <span class="slice"></span>
                        <span class="slice"></span>
                        <span class="slice"></span>
                        <span class="slice"></span>
                        <span class="slice"></span>
                        <span class="slice"></span>
                    </div>
                    <h5 class="text-center loading-text mt-2">Loading...</h5>

                    <div class="control-section">

                        @Html.EJS().Grid("Grid").DataSource((IEnumerable<object>)ViewBag.DataSource).AllowResizing(true).AllowExcelExport().ToolbarClick("toolbarClick").Height("400").Width("auto").ShowColumnChooser(true).Columns(col =>
                   {
                       col.Field("IsVerified").Template("#idtemplate").Type("checkbox").Width("60").AllowFiltering(true).AllowSorting(true).Add();
                       col.Field("Oid").Width("80").AllowEditing(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Visible(false).IsPrimaryKey(true).Add();
                       col.Field("TransDateTime").AllowEditing(false).Width("100").HeaderText("Trans Date").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Format(new { type = "dateTime", format = "dd/MMM/yyyy hh:mm:ss a" }).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("Location").AllowEditing(false).Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("LocationShortName").AllowEditing(false).Width("80").HeaderText("Short Name").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("StaffDate").EditType("datetimepickeredit").Width("200").HeaderText("Date").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Format(new { type = "dateTime", format = "dd/MMM/yyyy" }).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("Salesman").AllowEditing(false).Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("ShiftCount").AllowEditing(false).Width("80").HeaderText("Shift Count").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("ShiftType").EditType("dropdownedit").Width("80").HeaderText("Shift Type").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("Carriage").Width("80").Format("N3").HeaderText("Talabat").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("Deliveroo").Width("80").Format("N3").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("Cheque").Width("80").Format("N3").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("Online").Width("80").Format("N3").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("Knet").Width("80").Format("N3").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("Visa").Width("80").Format("N3").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("Cash").Width("80").Format("N3").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("Expense").Width("80").Format("N3").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("Reserve").Width("80").Format("N3").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("TotalSales").AllowEditing(false).Width("80").HeaderText("Total Amount").Format("N3").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("NetSales").AllowEditing(false).Width("80").HeaderText("Total Sales").Format("N3").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("NetAmount").AllowEditing(false).Width("80").HeaderText("Total Cash").Format("N3").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                   }).AllowPaging(true).AllowSorting(true).AllowFiltering().FilterSettings(filter => filter.Type(Syncfusion.EJ2.Grids.FilterType.Menu)).PageSettings(page =>
                   { page.PageSizes(true); page.PageSize(25); }).EditSettings(edit =>
                   {
                       edit.AllowEditing(true).Mode(Syncfusion.EJ2.Grids.EditMode.Normal);
                   }).Toolbar(new List<string>() { "Search", "Update", "Cancel", "ExcelExport", "ColumnChooser" }).Aggregates(agg =>
                   {
                       agg.Columns(new List<Syncfusion.EJ2.Grids.GridAggregateColumn>() {

                           new Syncfusion.EJ2.Grids.GridAggregateColumn() {
                               Field = "Cash", Format = "N3", Type = "Sum", FooterTemplate = "${Sum}"
                           },

                           new Syncfusion.EJ2.Grids.GridAggregateColumn() {
                               Field = "Carriage", Format = "N3", Type = "Sum", FooterTemplate = "${Sum}"
                           },

                           new Syncfusion.EJ2.Grids.GridAggregateColumn() {
                               Field = "Deliveroo", Format = "N3", Type = "Sum", FooterTemplate = "${Sum}"
                           },

                           new Syncfusion.EJ2.Grids.GridAggregateColumn() {
                               Field = "Cheque", Format = "N3", Type = "Sum", FooterTemplate = "${Sum}"
                           },

                           new Syncfusion.EJ2.Grids.GridAggregateColumn() {
                               Field = "Online", Format = "N3", Type = "Sum", FooterTemplate = "${Sum}"
                           },

                           new Syncfusion.EJ2.Grids.GridAggregateColumn() {
                               Field = "Knet", Format = "N3", Type = "Sum", FooterTemplate = "${Sum}"
                           },

                           new Syncfusion.EJ2.Grids.GridAggregateColumn() {
                               Field = "Visa", Format = "N3", Type = "Sum", FooterTemplate = "${Sum}"
                           },

                           new Syncfusion.EJ2.Grids.GridAggregateColumn() {
                               Field = "TotalSales", Format = "N3", Type = "Sum", FooterTemplate = "${Sum}"
                           },

                           new Syncfusion.EJ2.Grids.GridAggregateColumn() {
                               Field = "NetSales", Format = "N3", Type = "Sum", FooterTemplate = "${Sum}"
                           },

                           new Syncfusion.EJ2.Grids.GridAggregateColumn() {
                               Field = "NetAmount", Format = "N3", Type = "Sum", FooterTemplate = "${Sum}"
                           },

                           new Syncfusion.EJ2.Grids.GridAggregateColumn() {
                               Field = "Reserve", Format = "N3", Type = "Sum", FooterTemplate = "${Sum}"
                           },

                           new Syncfusion.EJ2.Grids.GridAggregateColumn() {
                               Field = "Expense", Format = "N3", Type = "Sum", FooterTemplate = "${Sum}"
                           }
                       }).Add();
                   }).ActionBegin("ActionBegin").DataBound("dataBound").RowDeselected("OnDeselected").RowSelected("OnSelected").AllowSelection(true).SelectionSettings(select => select.Type(Syncfusion.EJ2.Grids.SelectionType.Multiple).PersistSelection(true).CheckboxOnly(true)).Render()

                    </div>
                    <script id="idtemplate" type="text/x-template">
                        <div class="template_checkbox">
                            ${if(IsVerified === 1)}
                            <input type="checkbox" class="myClass" checked>
                            ${else}
                            <input type="checkbox" class="myClass" onchange="OnDeselected($event)"> ${/if}
                        </div>
                    </script>
                </div>
            </div>
        </div>
    </div>
</div>



@section scripts {



    <script>

        $('.preloader').hide();
        $('.loading-text').hide();

        function dataBound(args) {
            this.autoFitColumns(['Location', 'ShiftCount', 'ShiftType', 'Carriage', 'Deliveroo', 'Cheque', 'Online', 'Expense', 'Reserve', 'TotalSales', 'NetSales', 'NetAmount', 'Cash', 'Knet', 'Visa']);
        }

                var verificationIds = [];
                var deVerifiedIds = [];

                function OnDeselected(args) {
                    if (args.row.length === 0) {
                        deVerifiedIds = [];
                    } else {
                        if (args.row.length > 1) {
                            deVerifiedIds = [];
                            args.row.forEach(function (item, i) {
                                deVerifiedIds.push(item.cells[1].innerHTML);
                            });

                            verificationIds = [];
                        } else {
                            var deselectedId = +(args.row[0].cells[1].innerHTML);
                            // var deselectedId = +args.data[0].Oid;

                            if (deVerifiedIds.length === 0) {
                                deVerifiedIds.push(deselectedId);
                            } else {
                                var add = true;
                                deVerifiedIds.some(function (item, i) {
                                    if (item === deselectedId) {
                                        add = false;
                                    }
                                });
                                if (add) {
                                    deVerifiedIds.push(deselectedId);
                                }
                            }

                            verificationIds.some(function (item, i) {
                                if (item === deselectedId) {
                                    verificationIds.splice(i, 1);
                                }
                            });
                        }
                    }
                }

                function OnSelected(args) {
                    if (typeof args.data.Oid === 'undefined') {
                        verificationIds = [];
                        args.data.forEach(function (item, i) {
                            verificationIds.push(item.Oid);
                        });

                        verificationIds.some(function (item, i) {
                            deVerifiedIds.some(function (item2, i2) {
                                if (item === item2) {
                                    deVerifiedIds.splice(i2, 1);
                                }
                            });
                        });

                    } else {

                        var selectedId = args.data.Oid;
                        verificationIds.push(selectedId);

                        deVerifiedIds.some(function (item, i) {
                            if (item === selectedId) {
                                deVerifiedIds.splice(i, 1);
                            }
                        });
                    }
                }

                function Verify() {

                    if (verificationIds.length === 0 && deVerifiedIds.length === 0) {
                        setTimeout(() => {
                            var toastObj = document.getElementById('info-toast').ej2_instances[0];
                            toastObj.target = document.body;
                            toastObj.show();
                        }, 1000);
                    } else {
        $.ajax({
                        type: 'POST',
            data: {
                            verifiedIds: verificationIds,
                deVerifiedIds: deVerifiedIds,
            },
        url: '@Url.Action("UpdateVerifiedIds", "CashRegister")',
        dataType: 'json',
            success: function (response) {
                                if (response === true) {
                                    setTimeout(() => {
                                        var toastObj = document.getElementById('success-toast').ej2_instances[0];
                                        toastObj.target = document.body;
                                        toastObj.show();
                                    }, 1000);
                                    verificationIds = [];
                                    deVerifiedIds = [];
                                } else {
                                    setTimeout(() => {
                                        var toastObj = document.getElementById('error-toast').ej2_instances[0];
                                        toastObj.target = document.body;
                                        toastObj.show();
                                    }, 1000);
                                }
                            },
        error: function (ex) {
                                setTimeout(() => {
                                    var toastObj = document.getElementById('error-toast').ej2_instances[0];
                                    toastObj.target = document.body;
                                    toastObj.show();
                                }, 1000);
                            }
                        });
                    }
                }


                function toolbarClick(args) {
                    var gridObj = document.getElementById("Grid").ej2_instances[0];
                    if (args.item.id === 'Grid_excelexport') {
                        var excelExportProperties = {
        fileName: "CashRegisterReport.xlsx"
                        };
                    gridObj.excelExport(excelExportProperties);
                }
            }

         @*$(".getRecords").click(function () {

            var i = 1;
            setInterval(function () {
                i++;
            }, 1000);

            $('.preloader').show();
            $('.loading-text').show();
             $('.e-grid').hide();

              var fromDate = $('#fromDate').val();
            var toDate = $('#toDate').val();

             var grid = document.getElementById('Grid').ej2_instances[0]; // Grid instance
             $.ajax({
                type: 'GET',
                data: { from: fromDate.toString(), to: toDate.toString() },
                url: '@Url.Action("GetCashRegister", "CashRegister")',
                dataType: 'json',
                 success: function (response) {
                     console.log(response);
                    console.log('Total Time Taken: ', i);
                    $('.preloader').hide();
                    $('.loading-text').hide();
                    $('.e-grid').show();

                    grid.dataSource = response;
                    grid.refresh();
                },
                error: function (ex) {
                    alert(ex);
                    $('.preloader').hide();
                }

            });
        });*@

        function formatDateToString(date) {
            var dd = (date.getDate() < 10 ? '0' : '')
                + date.getDate();

            var MM = ((date.getMonth() + 1) < 10 ? '0' : '')
                + (date.getMonth() + 1);

            return dd + "-" + MM + "-" + date.getFullYear();
        } 

        function ActionBegin(args) {
            if (args.requestType === 'save') {

                var date = formatDateToString(new Date(args.data.StaffDate));
                var staffDate = JSON.stringify(date).slice(1, 11);
                // console.log('staffDate : ', staffDate);
                $.ajax({
                type: 'POST',
                url: '@Url.Action("Update", "CashRegister")',
                    data: {
                        oid: args.data.Oid,
                        staffDate: staffDate,
                        shiftType: args.data.ShiftType,
                        talabat: args.data.Carriage,
                        deliveroo: args.data.Deliveroo !== null ? args.data.Deliveroo : 0,
                        cheque: args.data.Cheque,
                        online: args.data.Online,
                        knet: args.data.Knet,
                        visa: args.data.Visa,
                        cash: args.data.Cash,
                        expense: args.data.Expense,
                        reserve: args.data.Reserve
                    },
                    success: function (response) {
                        console.log(response);
                    },
                    error: function (ex) {
                        alert(ex);
                        $('.preloader').hide();
                    }
                });
            }
        }

    </script>
}

