@using Syncfusion.EJ2
@model ImillReports.ViewModels.SalesReportViewModel

@{
    ViewBag.Title = "Sales Report";
    ViewBag.SubTitle = "Sales report according to locations";
}

<style>
    .e-grid .e-rowcell.customcss {
        font-size: 11px;
    }

    .e-grid .e-headercell.customcss {
        font-size: 11px;
    }

    .e-grid .e-summaryrow .e-summarycell, .e-grid .e-summaryrow .e-templatecell {
        font-size: 11px;
    }

    .e-headertext {
        font-size: 11px;
    }
</style>

<div class="container-fluid">
    @if (ViewBag.validation == "true")
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-danger alert-dismissible" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>
                    Start Date is Greater then End Date
                </div>
            </div>
        </div>
    }
    <div class="row clearfix">
        <div class="col-12">
            <div class="card">
                @using (Html.BeginForm("Index", "SalesReport", FormMethod.Get))
                {
                    <div class="row p-3">
                        <div class="col-3">
                            @Html.EJS().DateTimePicker("fromDate").Format("dd/MMM/yyyy hh:mm a").Value(ViewBag.startDate).Render()
                        </div>
                        <div class="col-3">
                            @Html.EJS().DateTimePicker("toDate").Format("dd/MMM/yyyy hh:mm a").Value(ViewBag.endDate).Render()
                        </div>
                        @if (User.IsInRole("Admin") || User.IsInRole("Sales") || User.IsInRole("HO"))
                        {
                            <div class="col-3" id="locationDiv">
                                @Html.EJS().MultiSelect("locationStringArray").ShowDropDownIcon().AllowFiltering(true).Value(ViewBag.locationVal).Placeholder("Select locations").EnableGroupCheckBox(true).DataSource(
                                (IEnumerable<object>)ViewBag.locations).Mode(Syncfusion.EJ2.DropDowns.VisualMode.CheckBox).ShowSelectAll(true).SelectAllText("Select All").UnSelectAllText("UnSelect All").Fields(
                                new Syncfusion.EJ2.DropDowns.MultiSelectFieldSettings { GroupBy = "TypeName", Text = "Name", Value = "LocationId" }).ActionBegin("onBegin").DataBound("onBound").Render()
                            </div>
                        }
                        <div class="col-2">
                            @Html.EJS().MultiSelect("voucherTypeStringArray").ShowDropDownIcon().AllowFiltering(true).Filtering("onVoucherTypefiltering").Value(ViewBag.voucherTypesVal).Placeholder("Select Voucher").DataSource(
                           (IEnumerable<object>)ViewBag.voucherTypes
                           ).Mode(Syncfusion.EJ2.DropDowns.VisualMode.CheckBox).ShowSelectAll(true).SelectAllText("Select All").UnSelectAllText("UnSelect All").Fields(
                           new Syncfusion.EJ2.DropDowns.MultiSelectFieldSettings { Text = "L_Voucher_Name", Value = "Voucher_Type" }).ActionBegin("onVoucherTypeBegin").DataBound("onVoucherTypeBound").Render()
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-2 py-2 mx-auto">
                            <button type="button" class="btn btn-raised bg-black waves-effect waves-light getRecords">Get Records</button>
                        </div>
                    </div>
                }
            </div>
            <div class="card mt-3">
                <div class="body">

                    <div class="preloader loading">
                        <span class="slice"></span>
                        <span class="slice"></span>
                        <span class="slice"></span>
                        <span class="slice"></span>
                        <span class="slice"></span>
                        <span class="slice"></span>
                    </div>
                    <h5 class="text-center loading-text mt-2">Loading...</h5>

                    @Html.EJS().Grid("Grid").DataSource((IEnumerable<object>)ViewBag.DataSource).AllowResizing(true).AllowExcelExport().ToolbarClick("toolbarClick").Height("600").Width("auto").ShowColumnChooser(true).Columns(col =>
               {
                   col.Field("Location").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("InvDateTime").Width("100").HeaderText("Date").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Format(new { type = "dateTime", format = "dd/MMM/yyyy hh:mm a" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("Salesman").Width("150").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("InvoiceNumber").HeaderText("Invoice").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                   // col.Field("GroupCD").Width("30").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Filter(new { type = "CheckBox" }).Add();
                   col.Field("CustomerName").HeaderText("Cust Name").Width("150").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("CustomerNameAr").HeaderText("Cust Name(Ar)").Width("150").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("Voucher").Width("100").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("AmountRecieved").Width("80").HeaderText("Amount").Format("N3").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("Discount").Width("80").Format("N3").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("NetAmount").Width("80").Format("N3").HeaderText("Total Amount").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("Cash").Width("80").Format("N3").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("Knet").Width("80").Format("N3").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("CreditCard").HeaderText("Visa").Width("80").Format("N3").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                   // col.Field("CreditCardType").Width("50").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Add();
               }).AllowPaging(true).AllowSorting(true).AllowFiltering().FilterSettings(filter => filter.Type(Syncfusion.EJ2.Grids.FilterType.Menu)).PageSettings(
                   page => { page.PageSizes(true); page.PageSize(25); }).Toolbar(new List<string>() { "Search", "ExcelExport", "ColumnChooser" }).Aggregates(agg =>
                   {
                       agg.Columns(new List<Syncfusion.EJ2.Grids.GridAggregateColumn>() {
                           new Syncfusion.EJ2.Grids.GridAggregateColumn() {
                               Field = "AmountRecieved", Format= "N3", Type = "Sum", FooterTemplate = "${Sum}"
                           }, new Syncfusion.EJ2.Grids.GridAggregateColumn() {
                               Field = "Discount", Format= "N3", Type = "Sum", FooterTemplate = "${Sum}"
                           }, new Syncfusion.EJ2.Grids.GridAggregateColumn() {
                               Field = "NetAmount", Format= "N3", Type = "Sum", FooterTemplate = "${Sum}"
                           }, new Syncfusion.EJ2.Grids.GridAggregateColumn() {
                               Field = "Cash", Format= "N3", Type = "Sum", FooterTemplate = "${Sum}"
                           }, new Syncfusion.EJ2.Grids.GridAggregateColumn() {
                               Field = "Knet", Format= "N3", Type = "Sum", FooterTemplate = "${Sum}"
                           }, new Syncfusion.EJ2.Grids.GridAggregateColumn() {
                               Field = "CreditCard", Format= "N3", Type = "Sum", FooterTemplate = "${Sum}"
                           } }).Add();
                   }).DataBound("dataBound").Load("load").Render()

                    @*.AllowGrouping().GroupSettings(group => group.Columns(new string[] {"Date"}))*@

                    @*<table id="datatable" class="table table-bordered table-striped w-100">
                        <thead>
                            <tr>
                                <th class="text-center SLocation">Location</th>
                                <th class="text-center SDate">Date</th>
                                <th class="text-center SSalesman">Salesman</th>
                            </tr>
                        </thead>*@
                    @*<tbody>
                            @foreach (var item in Model.SalesReportItems)
                            {
                                <tr>
                                    <td class="text-center">@item.Location</td>
                                    <td class="text-center">@item.TransDateTime.ToString("dd-MMM-yyyy")</td>
                                </tr>
                            }
                        </tbody>*@

                    @*<tfoot>
                                <tr>
                                    <th class="text-center">Location</th>
                                    <th class="text-center">Date</th>
                                    <th class="text-center SSalesman">Salesman</th>
                                </tr>
                            </tfoot>
                        </table>*@
                </div>
            </div>
        </div>
    </div>
</div>

<a id="download" target="_blank" href="~/Content/SalesReport.xlsx" hidden></a>

@section scripts {
    <script>

        $('.preloader').hide();
        $('.loading-text').hide();

        function dataBound(args) {
            this.autoFitColumns(['Voucher', 'InvoiceNumber', 'InvDateTime', 'AmountRecieved', 'Discount', 'NetAmount', 'Cash', 'Knet', 'CreditCard']);
        }

        function load() {
            var grid = document.getElementById('Grid').ej2_instances[0];
            var rowHeight = grid.getRowHeight();  //height of the each row
            var gridHeight = grid.height;  //grid height
            var pageSize = grid.pageSettings.pageSize;   //initial page size
            var pageResize = 25; //new page size is obtained here
            grid.pageSettings.pageSize = pageSize + Math.round(pageResize);
        }

        function toolbarClick(args) {
            var gridObj = document.getElementById("Grid").ej2_instances[0];
            if (args.item.id === 'Grid_excelexport') {
                if (args.item.id === 'Grid_excelexport') {
                    var gridObj = document.getElementById("Grid").ej2_instances[0];
                    var excelExportProperties = {
                        fileName: "SalesReport.xlsx",
                        theme: "none",
                        includeHiddenColumn: false
                    };
                    gridObj.excelExport(excelExportProperties);
                    // document.getElementById('download').click();
                }
            }
        }

        function onVoucherTypefiltering(e) {
            var CBObj = document.getElementById("voucherTypeStringArray").ej2_instances[0];
            if (e.text == '')
                e.updateData(CBObj.dataSource);
            else {
                var query = new ej.data.Query().from('voucherTypeStringArray').select(['L_Voucher_Name', 'Voucher_Type']);
                query = (e.text !== '') ? query.where('L_Voucher_Name', 'contains', e.text, true) : query;
                e.updateData(CBObj.dataSource, query);
            }
        }

         var selected = [];
        function onBegin(e) {
            this.fields = {
                text: 'Name', value: 'LocationId', itemCreated: function (e) {
                    var count = 0;
                    if (count === 0) {
                        for (let i = 0; i < e.dataSource.length; i++) {
                            if (e.curData.IsSelected == true)
                                itemSearch(e.curData.LocationId); //pass the corresponding value
                        }
                    }
                }
            }
        }

        function itemSearch(e) {
            if (selected.indexOf(e) == -1)
                selected.push(e);
        }

        function onBound(e) {
            this.value = selected;
        }


          var selectedVoucherType = [];
        function onVoucherTypeBegin(e) {
            this.fields = {
                text: 'L_Voucher_Name', value: 'Voucher_Type', itemCreated: function (e) {
                    var count = 0;
                    if (count === 0) {
                        for (let i = 0; i < e.dataSource.length; i++) {
                            if (e.curData.IsSelected == true)
                                itemVoucherTypeSearch(e.curData.Voucher_Type); //pass the corresponding value
                        }
                    }
                }
            }
        }

        function itemVoucherTypeSearch(e) {
            if (selectedVoucherType.indexOf(e) == -1)
                selectedVoucherType.push(e);
        }

        function onVoucherTypeBound(e) {
            this.value = selectedVoucherType;
        }

        $(".getRecords").click(function () {

            var i = 1;
            setInterval(function () {
                i++;
            }, 1000);

            $('.preloader').show();
            $('.loading-text').show();
            $('.e-grid').hide();

            var fromDate = $('#fromDate').val();
            var toDate = $('#toDate').val();

            var grid = document.getElementById('Grid').ej2_instances[0]; // Grid instance
            var locationObj = '@User.IsInRole("Admin")' === 'True' || '@User.IsInRole("Sales")' === 'True' || '@User.IsInRole("HO")' === 'True' ? document.getElementById('locationStringArray').ej2_instances[0].value : ["84","1"]; // MultiSelect Instance of location
            var vouchertypeObj = document.getElementById('voucherTypeStringArray').ej2_instances[0]; // MultiSelect Instance of voucher Type

            $.ajax({
                type: 'GET',
                data: { from: fromDate.toString(), to: toDate.toString(), locations: locationObj.toString(), voucherType: vouchertypeObj.value.toString() },
                url: '@Url.Action("GetSalesReport", "SalesReport")',
                dataType: 'json',
                success: function (response) {
                    console.log('Total Time Taken: ', i);
                    $('.preloader').hide();
                    $('.loading-text').hide();
                    $('.e-grid').show();

                    grid.dataSource = response;
                    grid.refresh();
                },
                error: function (ex) {
                    alert(ex);
                    $('.preloader').hide();
                }

            });
        });




        $(document).ready(function () {
            $('#locationDiv .bootstrap-select button').remove();
            $('#locationDiv .bootstrap-select').removeAttr("class");
            //$('#locationDiv .bootstrap-select').removeClass("show-tick");
            //$('#locationDiv .bootstrap-select').removeClass("form-control");
            //$('#locationDiv .bootstrap-select').removeClass("btn-group");
            //$('#locationDiv .bootstrap-select').removeClass("bootstrap-select");
        });

    </script>
}