@using Syncfusion.EJ2
@using Syncfusion.EJ2.DropDowns
@{
    ViewBag.Title = "Sales Hourly Report";
    ViewBag.SubTitle = "Shows the hourly pattern of the sales";
}

<div class="container-fluid">
    @if (ViewBag.validation == "true")
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-danger alert-dismissible" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>
                    Start Date is Greater then End Date
                </div>
            </div>
        </div>
    }

    <div class="row clearfix">
        <div class="col-12">

            <div class="card">
                @using (Html.BeginForm("SalesHourlyReport", "SalesReport", FormMethod.Get))
                {
                    <div class="row p-3">
                        <div class="col-2">
                            @Html.EJS().DatePicker("fromDate").Format("dd/MMM/yyyy").Value(ViewBag.startDate).Render()
                        </div>

                        <div class="col-3">
                            @Html.EJS().MultiSelect("locationStringArray").ShowDropDownIcon().AllowFiltering(true).Value(ViewBag.locationVal).Placeholder("Select location(s)").DataSource(
                          (IEnumerable<object>)ViewBag.locations
                          ).Mode(Syncfusion.EJ2.DropDowns.VisualMode.CheckBox).ShowSelectAll(true).SelectAllText("Select All").UnSelectAllText("UnSelect All").Fields(
                          new Syncfusion.EJ2.DropDowns.MultiSelectFieldSettings { Text = "Name", Value = "LocationId" }).ActionBegin("onBegin").DataBound("onBound").Render()
                        </div>

                        <div class="col-2">
                            @Html.EJS().DropDownList("reportType").Placeholder("Select report type").Index(1).DataSource(
                           (IEnumerable<object>)ViewBag.ReportType).Change("reportTypeChanged").Fields(new DropDownListFieldSettings { Text = "Name", Value = "Id" }).Render()
                        </div>

                        <div class="col-2">
                            <button type="submit" class="btn btn-raised bg-black waves-effect waves-light getRecords">Get Records</button>
                        </div>
                    </div>
                }
            </div>

            <div class="card mt-3 transAmount">
                <div class="body">
                    @Html.EJS().Chart("Amount").Margin(mr => mr.Left(0).Top(0).Bottom(0).Right(0)).Series(series =>
                    {
                    series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column)
                    .CornerRadius(cr => cr.TopLeft(6).TopRight(6))
                    .Marker(mr => mr.DataLabel(dl =>
                    dl.Visible(true).Font(ff => ff.FontWeight("300").Color("#ffffff")).Position(Syncfusion.EJ2.Charts.LabelPosition.Top))
                    ).ColumnWidth(0.85).XName("x").YName("yValue").DataSource(ViewBag.dataSourceAmount).Width(1).Add();
                    }).PrimaryYAxis(px => px.LabelStyle(ls => ls.Color("#808080")).LineStyle(ls => ls.Width(1))
                    .MajorTickLines(mg => mg.Width(0)).MajorGridLines(mg => mg.Width(0))).PrimaryXAxis(px =>
                    px.Interval(1).ValueType(Syncfusion.EJ2.Charts.ValueType.Category).MajorGridLines(mg => mg.Width(0)).LabelRotation(0).LabelStyle(ff => ff.FontWeight("600"))
                    ).Tooltip(tt =>
                    tt.Enable(true)).ChartArea(area => area.Border(br =>
                    br.Color("transparent"))).LegendSettings(lg =>
                    lg.Visible(false)).Title(ViewBag.BarChartAmountTitle).Render()

                    @*@Html.EJS().Chart("container").Palettes(ViewBag.seriesColors).Render()*@
                </div>
            </div>

            <div class="card mt-3 transCount">
                <div class="body">
                    @Html.EJS().Chart("Count").Margin(mr => mr.Left(0).Top(0).Bottom(0).Right(0)).Series(series =>
                    {
                    series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column)
                    .CornerRadius(cr => cr.TopLeft(6).TopRight(6))
                    .Marker(mr => mr.DataLabel(dl =>
                    dl.Visible(true).Font(ff => ff.FontWeight("300").Color("#ffffff")).Position(Syncfusion.EJ2.Charts.LabelPosition.Top))
                    ).ColumnWidth(0.85).XName("x").YName("yValue").DataSource(ViewBag.dataSourceCount).Width(1).Add();
                    }).PrimaryYAxis(px => px.LabelStyle(ls => ls.Color("#808080")).LineStyle(ls => ls.Width(1))
                    .MajorTickLines(mg => mg.Width(0)).MajorGridLines(mg => mg.Width(0))).PrimaryXAxis(px =>
                    px.Interval(1).ValueType(Syncfusion.EJ2.Charts.ValueType.Category).MajorGridLines(mg => mg.Width(0)).LabelRotation(0).LabelStyle(ff => ff.FontWeight("600"))
                    ).Tooltip(tt =>
                    tt.Enable(true)).ChartArea(area => area.Border(br =>
                    br.Color("transparent"))).LegendSettings(lg =>
                    lg.Visible(false)).Title(ViewBag.BarChartCountTitle).Render()

                    @*@Html.EJS().Chart("container").Palettes(ViewBag.seriesColors).Render()*@
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>
        var selected = [];
        function onBegin(e) {
            this.fields = {
                text: 'Name', value: 'LocationId', itemCreated: function (e) {
                    var count = 0;
                    if (count === 0) {
                        for (let i = 0; i < e.dataSource.length; i++) {
                            if (e.curData.IsSelected == true)
                                itemSearch(e.curData.LocationId); //pass the corresponding value
                        }
                    }
                }
            }
        }

        function itemSearch(e) {
            if (selected.indexOf(e) == -1)
                selected.push(e);
        }

        function onBound(e) {
            this.value = selected;
        }

        var transAmount = $('.transAmount');
        var transCount = $('.transCount');

        
        transCount.show();

        function reportTypeChanged(args) {
            var rptTypeId = args.itemData.Id;
            if (rptTypeId === 1) {
                transAmount.show();
                transCount.hide();
            } else if (rptTypeId >= 1) {
                transCount.show();
                transAmount.hide();
            }
        }

    </script>
}