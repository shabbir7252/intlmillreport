@using Syncfusion.EJ2
@using Syncfusion.EJ2.DropDowns
@{
    ViewBag.Title = "Sales Hourly Report";
    ViewBag.SubTitle = "Shows the hourly pattern of the sales";
    string BarChartAmountTitle = ViewBag.BarChartAmountTitle.ToString();
    string BarChartCountTitle = ViewBag.BarChartCountTitle.ToString();
}

    <style>
        #locationStringArray_popup{
            display: inline-block !important;
        }
    </style>

<div class="container-fluid">
    @if (ViewBag.validation == "true")
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-danger alert-dismissible" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>
                    Start Date is Greater then End Date
                </div>
            </div>
        </div>
    }

    <div class="row clearfix">
        <div class="col-12">

            <div class="card">
                @using (Html.BeginForm("SalesHourlyReport", "SalesReport", FormMethod.Get))
                {
                    <div class="row p-3">
                        <div class="col-2">
                            @Html.EJS().DatePicker("fromDate").Format("dd/MMM/yyyy").Value(ViewBag.startDate).Render()
                        </div>

                        <div class="col-3">
                            @Html.EJS().MultiSelect("locationStringArray").ShowDropDownIcon().AllowFiltering(true).Value(ViewBag.locationVal).Placeholder("Select location(s)").EnableGroupCheckBox(true).DataSource(
                          (IEnumerable<object>)ViewBag.locations).Mode(Syncfusion.EJ2.DropDowns.VisualMode.CheckBox).ShowSelectAll(true).SelectAllText("Select All").UnSelectAllText("UnSelect All").Fields(
                          new Syncfusion.EJ2.DropDowns.MultiSelectFieldSettings { GroupBy = "TypeName", Text = "Name", Value = "LocationId" }).ActionBegin("onBegin").DataBound("onBound").Render()
                        </div>

                        <div class="col-2">
                            <button type="submit" class="btn btn-raised bg-black waves-effect waves-light getRecords">Get Records</button>
                        </div>
                    </div>
                }
            </div>

            <div class="card mt-3">
                <div class="body">

                    <div class="row">
                        <div class="col-2 mx-auto my-5">
                            @Html.EJS().DropDownList("reportType").Placeholder("Select report type").Index(1).DataSource(
                           (IEnumerable<object>)ViewBag.ReportType).Change("reportTypeChanged").Fields(new DropDownListFieldSettings { Text = "Name", Value = "Id" }).Render()
                        </div>
                    </div>

                    <section class="transAmount">
                        @Html.EJS().Chart("Amount").Series(series =>
                   {
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource1).Name(ViewBag.locationName1).Add();
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource2).Name(ViewBag.locationName2).Add();
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource3).Name(ViewBag.locationName3).Add();
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource4).Name(ViewBag.locationName4).Add();
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource5).Name(ViewBag.locationName5).Add();
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource6).Name(ViewBag.locationName6).Add();
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource7).Name(ViewBag.locationName7).Add();
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource8).Name(ViewBag.locationName8).Add();
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource9).Name(ViewBag.locationName9).Add();
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource10).Name(ViewBag.locationName10).Add();
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource11).Name(ViewBag.locationName11).Add();
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource12).Name(ViewBag.locationName12).Add();
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource13).Name(ViewBag.locationName13).Add();
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource14).Name(ViewBag.locationName14).Add();
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource15).Name(ViewBag.locationName15).Add();
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource16).Name(ViewBag.locationName16).Add();
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource17).Name(ViewBag.locationName17).Add();
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource18).Name(ViewBag.locationName18).Add();
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource19).Name(ViewBag.locationName19).Add();
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource20).Name(ViewBag.locationName20).Add();
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource21).Name(ViewBag.locationName21).Add();
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource22).Name(ViewBag.locationName22).Add();
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource23).Name(ViewBag.locationName23).Add();
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource24).Name(ViewBag.locationName24).Add();
                   }).PrimaryXAxis(px => px.ValueType(Syncfusion.EJ2.Charts.ValueType.Category)
                   .MajorGridLines(mg => mg.Width(0)).LabelRotation(-30).MinorGridLines(mg => mg.Width(0))
                   .MajorTickLines(mt => mt.Width(0)).
                   MinorTickLines(mt => mt.Width(0)).LineStyle(ls => ls.Width(0))
                   // .LabelIntersectAction(Syncfusion.EJ2.Charts.LabelIntersectAction.Rotate90)
                   ).PrimaryYAxis(py => py.MajorTickLines(mt => mt.Width(0))
                   .MinorTickLines(mt => mt.Width(0)).LineStyle(ls => ls.Width(0)).Title("Sales")).Title(BarChartAmountTitle).ChartArea(area =>
                   area.Border(br => br.Color("transparent"))).Tooltip(tt => tt.Enable(true).Format("${point.tooltip}")).Render()
                    </section>

                    <section class="transCount">
                        @Html.EJS().Chart("Count").Series(series =>
                  {
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource1).Name(ViewBag.locationCountName1).Add();
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource2).Name(ViewBag.locationCountName2).Add();
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource3).Name(ViewBag.locationCountName3).Add();
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource4).Name(ViewBag.locationCountName4).Add();
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource5).Name(ViewBag.locationCountName5).Add();
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource6).Name(ViewBag.locationCountName6).Add();
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource7).Name(ViewBag.locationCountName7).Add();
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource8).Name(ViewBag.locationCountName8).Add();
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource9).Name(ViewBag.locationCountName9).Add();
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource10).Name(ViewBag.locationCountName10).Add();
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource11).Name(ViewBag.locationCountName11).Add();
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource12).Name(ViewBag.locationCountName12).Add();
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource13).Name(ViewBag.locationCountName13).Add();
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource14).Name(ViewBag.locationCountName14).Add();
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource15).Name(ViewBag.locationCountName15).Add();
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource16).Name(ViewBag.locationCountName16).Add();
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource17).Name(ViewBag.locationCountName17).Add();
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource18).Name(ViewBag.locationCountName18).Add();
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource19).Name(ViewBag.locationCountName19).Add();
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource20).Name(ViewBag.locationCountName20).Add();
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource21).Name(ViewBag.locationCountName21).Add();
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource22).Name(ViewBag.locationCountName22).Add();
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource23).Name(ViewBag.locationCountName23).Add();
                      series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn).XName("x").YName("y").DataSource(ViewBag.dataCountSource24).Name(ViewBag.locationCountName24).Add();
                  }).PrimaryXAxis(px => px.ValueType(Syncfusion.EJ2.Charts.ValueType.Category)
                  .MajorGridLines(mg => mg.Width(0)).LabelRotation(-30).MinorGridLines(mg => mg.Width(0)).MajorTickLines(mt => mt.Width(0)).
                  MinorTickLines(mt => mt.Width(0)).LineStyle(ls => ls.Width(0))
                  // .LabelIntersectAction(Syncfusion.EJ2.Charts.LabelIntersectAction.Rotate90)
                  ).PrimaryYAxis(py => py.MajorTickLines(mt => mt.Width(0))
                  .MinorTickLines(mt => mt.Width(0)).LineStyle(ls => ls.Width(0)).Title("Count")).Title(BarChartCountTitle).ChartArea(area =>
                  area.Border(br => br.Color("transparent"))).Tooltip(tt => tt.Enable(true).Template("#Tooltip")).Render()
                    </section>

                    @*@Html.EJS().Chart("Amount").Margin(mr => mr.Left(0).Top(0).Bottom(0).Right(0)).Series(series =>
                {
                series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column)
                .CornerRadius(cr => cr.TopLeft(6).TopRight(6))
                .Marker(mr => mr.DataLabel(dl =>
                dl.Visible(true).Font(ff => ff.FontWeight("300").Color("#ffffff")).Position(Syncfusion.EJ2.Charts.LabelPosition.Top))
                ).ColumnWidth(0.85).XName("x").YName("yValue").DataSource(ViewBag.dataSourceAmount).Width(1).Add();
                }).PrimaryYAxis(px => px.LabelStyle(ls => ls.Color("#808080")).LineStyle(ls => ls.Width(1))
                .MajorTickLines(mg => mg.Width(0)).MajorGridLines(mg => mg.Width(0))).PrimaryXAxis(px =>
                px.Interval(1).ValueType(Syncfusion.EJ2.Charts.ValueType.Category).MajorGridLines(mg => mg.Width(0)).LabelRotation(0).LabelStyle(ff => ff.FontWeight("600"))
                ).Tooltip(tt =>
                tt.Enable(true)).ChartArea(area => area.Border(br =>
                br.Color("transparent"))).LegendSettings(lg =>
                lg.Visible(false)).Title(ViewBag.BarChartAmountTitle).Render()*@


                    @*@Html.EJS().Chart("Count").Margin(mr => mr.Left(0).Top(0).Bottom(0).Right(0)).Series(series =>
                {
                series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column)
                .CornerRadius(cr => cr.TopLeft(6).TopRight(6))
                .Marker(mr => mr.DataLabel(dl =>
                dl.Visible(true).Font(ff => ff.FontWeight("300").Color("#ffffff")).Position(Syncfusion.EJ2.Charts.LabelPosition.Top))
                ).ColumnWidth(0.85).XName("x").YName("yValue").DataSource(ViewBag.dataSourceCount).Width(1).Add();
                }).PrimaryYAxis(px => px.LabelStyle(ls => ls.Color("#808080")).LineStyle(ls => ls.Width(1))
                .MajorTickLines(mg => mg.Width(0)).MajorGridLines(mg => mg.Width(0))).PrimaryXAxis(px =>
                px.Interval(1).ValueType(Syncfusion.EJ2.Charts.ValueType.Category).MajorGridLines(mg => mg.Width(0)).LabelRotation(0).LabelStyle(ff => ff.FontWeight("600"))
                ).Tooltip(tt =>
                tt.Enable(true)).ChartArea(area => area.Border(br =>
                br.Color("transparent"))).LegendSettings(lg =>
                lg.Visible(false)).Title(ViewBag.BarChartCountTitle).Render()*@


                    @*@Html.EJS().Chart("container").Palettes(ViewBag.seriesColors).Render()*@
                </div>
            </div>

            <script id='Tooltip' type="text/x-template">
                <div id="wrap">
                    <table style="width:100%;  border: 1px solid black;" class="table-borderless">
                        <tr>
                            <th rowspan="2" style="background-color: #C1272D">
                                ${series.name}
                            </th>
                            <td style="height: 25px; width: 50px; background-color: #C1272D; font-size: 14px; color: #E7C554; font-weight: bold; padding-left: 5px">${x}</td>
                        </tr>
                        <tr>
                            <td style="height: 25px; width: 50px; background-color: #C1272D; font-size: 18px; color: #FFFFFF; font-weight: bold; padding-left: 5px">${y}</td>
                        </tr>
                    </table>
                </div>
            </script>


        </div>
    </div>
</div>

@section scripts {
    <script>

        var selected = [];
        function onBegin(e) {
            this.fields = {
                text: 'Name', value: 'LocationId', itemCreated: function (e) {
                    var count = 0;
                    if (count === 0) {
                        for (let i = 0; i < e.dataSource.length; i++) {
                            if (e.curData.IsSelected == true)
                                itemSearch(e.curData.LocationId); //pass the corresponding value
                        }
                    }
                }
            }
        }

        function itemSearch(e) {
            if (selected.indexOf(e) == -1)
                selected.push(e);
        }

        function onBound(e) {
            this.value = selected;
        }

        var transAmount = $('.transAmount');
        var transCount = $('.transCount');


        function reportTypeChanged(args) {
            var rptTypeId = args.itemData.Id;
            if (rptTypeId === 1) {
                transAmount.show();
                transCount.hide();
            } else if (rptTypeId >= 1) {
                transCount.show();
                transAmount.hide();
            } else {
                transCount.hide();
                transAmount.hide();
            }
        }

        $(function () {

            transCount.hide();
        });

    </script>
}




