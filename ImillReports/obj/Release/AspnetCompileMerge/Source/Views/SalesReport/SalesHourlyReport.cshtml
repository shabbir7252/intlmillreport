@using Syncfusion.EJ2
@using Syncfusion.EJ2.DropDowns
@using ImillReports.ViewModels
@{
    ViewBag.Title = "Sales Hourly Report";
    ViewBag.SubTitle = "Shows the hourly pattern of the sales";
    string BarChartAmountTitle = ViewBag.BarChartAmountTitle.ToString();
    string BarChartCountTitle = ViewBag.BarChartCountTitle.ToString();

    var isAdmin = User.IsInRole("Admin");
    string[] color = new string[] { 
        "#4286f4", "#f4b642", "#f441a9",
        "#945713", "#7bb4eb", "#ea7a57", 
        "#00bdae", "#404041", "#e56590", 
        "#f8b883", "#70ad47", "#dd8abd", 
        "#F8BF00", "#E11C34", "#E6B3B3", 
        "#999999", "#7f84e8", "#FF99E6", 
        "#CCFF1A", "#555555", "#59A28F", 
        "#33FFCC", "#66994D", "#B366CC", 
        "#4D8000", "#B33300", "#CC80CC",
        "#66664D", "#991AFF", "#E666FF", 
        "#4DB3FF", "#1AB399", "#E666B3", 
        "#33991A", "#CC9999", "#B3B31A", 
        "#00E680", "#4D8066", "#809980", 
        "#E6FF80", "#1AFF33", "#999933", 
        "#FF3380", "#CCCC00", "#66E64D", 
        "#4D80CC", "#9900B3", "#E64D66", 
        "#4DB380", "#FF4D4D", "#99E6E6" };
}

<style>
    #locationStringArray_popup {
        display: inline-block !important;
    }

    /* The side navigation menu */
    .sidenav {
        height: 100%; /* 100% Full-height */
        width: 0; /* 0 width - change this with JavaScript */
        position: fixed; /* Stay in place */
        z-index: 1; /* Stay on top */
        top: 100px; /* Stay at the top */
        right: 0;
        background-color: #111; /* Black*/
        overflow-x: hidden; /* Disable horizontal scroll */
        padding-top: 60px; /* Place content 60px from the top */
        transition: 0.5s; /* 0.5 second transition effect to slide in the sidenav */
    }

        /* The navigation menu links */
        .sidenav a {
            padding: 8px 8px 8px 32px;
            text-decoration: none;
            font-size: 25px;
            color: #818181;
            display: block;
            transition: 0.3s;
        }

            /* When you mouse over the navigation links, change their color */
            .sidenav a:hover {
                color: #f1f1f1;
            }

        /* Position and style the close button (top right corner) */
        .sidenav .closebtn {
            position: absolute;
            top: 0;
            right: 25px;
            font-size: 36px;
            margin-left: 50px;
        }

    /* Style page content - use this if you want to push the page content to the right when you open the side navigation */
    #main {
        transition: margin-left .5s;
        padding: 20px;
    }

    /* On smaller screens, where height is less than 450px, change the style of the sidenav (less padding and a smaller font size) */
    @@media screen and (max-height: 450px) {
        .sidenav {
            padding-top: 15px;
        }

            .sidenav a {
                font-size: 18px;
            }
    }
</style>

<div class="container-fluid">
    @if (ViewBag.validation == "true")
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-danger alert-dismissible" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>
                    Start Date is Greater then End Date
                </div>
            </div>
        </div>
    }



    <div id="mySidenav" class="sidenav">
        <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
        <div class="row">
            <div class="col-12 pb-5 mb-5">
                <hr style="border-color: #9e9e9eb8; width: 110%;" />
                <h5 class="m-0 transAmount text-light pl-2">Total Sales : @ViewBag.TotalChartAmount</h5>
                <h5 class="m-0 transCount text-light pl-2">Total Count : @ViewBag.TotalChartCount</h5>
                <hr style="border-color: #9e9e9eb8; width: 110%;" />
                @{
                    var branchWiseTotals = (List<HourlySalesBranchTotal>)ViewBag.BranchWiseTotals;
                    var branchWiseCountTotals = (List<HourlySalesBranchCountTotal>)ViewBag.BranchWiseCountTotals;
                }

                @foreach (var item in branchWiseTotals)
                {
                    <h6 class="text-light pl-2 transAmountDetail">@item.LocationName <br /> @item.AmountInfo</h6>
                }

                @foreach (var item in branchWiseCountTotals)
                {
                    <h6 class="text-light pl-2 transCountDetail">@item.LocationName <br /> @item.CountInfo</h6>
                }
                <br />
                <br />
            </div>
        </div>
    </div>

    <!-- Add all page content inside this div if you want the side nav to push page content to the right (not used if you only want the sidenav to sit on top of the page -->
    <div id="main">
        <div class="row clearfix">
            <div class="col-12">

                <div class="card">
                    @using (Html.BeginForm("SalesHourlyReport", "SalesReport", FormMethod.Get))
                    {
                        <div class="row p-3">
                            <div class="col-2">
                                @Html.EJS().DatePicker("fromDate").Format("dd/MMM/yyyy").Value(ViewBag.startDate).Render()
                            </div>

                            <div class="col-3">
                                @Html.EJS().MultiSelect("locationStringArray").ShowDropDownIcon().AllowFiltering(true).Value(ViewBag.locationVal).Placeholder("Select location(s)").EnableGroupCheckBox(true).DataSource(
                              (IEnumerable<object>)ViewBag.locations).Mode(Syncfusion.EJ2.DropDowns.VisualMode.CheckBox).ShowSelectAll(true).SelectAllText("Select All").UnSelectAllText("UnSelect All").Fields(
                              new Syncfusion.EJ2.DropDowns.MultiSelectFieldSettings { GroupBy = "TypeName", Text = "Name", Value = "LocationId" }).ActionBegin("onBegin").DataBound("onBound").Render()
                            </div>

                            <div class="col-2">
                                <button type="submit" class="btn btn-raised bg-black waves-effect waves-light getRecords">Get Records</button>
                            </div>
                        </div>
                    }
                </div>

                <div class="card mt-3">
                    <div class="body">

                        <div class="row">
                            <div class="offset-10 col-2 text-right">
                                <!-- Use any element to open the sidenav -->
                                <button class="btn btn-raised bg-black waves-effect waves-light" onclick="openNav()">Show Branch Totals</button>
                            </div>
                        </div>

                        @if (isAdmin)
                        {
                            <div class="row">
                                <div class="col-2 mx-auto mb-5">
                                    @Html.EJS().DropDownList("reportType").Placeholder("Select report type").Index(1).DataSource(
                                   (IEnumerable<object>)ViewBag.ReportType).Change("reportTypeChanged").Fields(new DropDownListFieldSettings { Text = "Name", Value = "Id" }).Render()
                                </div>
                            </div>

                            <section class="transAmount">
                                @Html.EJS().Chart("Amount").Palettes(color).Series(series =>
                           {
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource1).Name(ViewBag.locationName1).Add();
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource2).Name(ViewBag.locationName2).Add();
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource3).Name(ViewBag.locationName3).Add();
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource4).Name(ViewBag.locationName4).Add();
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource5).Name(ViewBag.locationName5).Add();
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource6).Name(ViewBag.locationName6).Add();
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource7).Name(ViewBag.locationName7).Add();
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource8).Name(ViewBag.locationName8).Add();
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource9).Name(ViewBag.locationName9).Add();
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource10).Name(ViewBag.locationName10).Add();
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource11).Name(ViewBag.locationName11).Add();
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource12).Name(ViewBag.locationName12).Add();
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource13).Name(ViewBag.locationName13).Add();
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource14).Name(ViewBag.locationName14).Add();
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource15).Name(ViewBag.locationName15).Add();
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource16).Name(ViewBag.locationName16).Add();
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource17).Name(ViewBag.locationName17).Add();
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource18).Name(ViewBag.locationName18).Add();
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource19).Name(ViewBag.locationName19).Add();
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource20).Name(ViewBag.locationName20).Add();
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource21).Name(ViewBag.locationName21).Add();
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource22).Name(ViewBag.locationName22).Add();
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource23).Name(ViewBag.locationName23).Add();
                               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Marker(mr => mr.Visible(true).Width(5).Height(5)).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataSource24).Name(ViewBag.locationName24).Add();
                           }).PrimaryXAxis(px => px.ValueType(Syncfusion.EJ2.Charts.ValueType.Category)
                           .MajorGridLines(mg => mg.Width(0)).LabelRotation(-30).MinorGridLines(mg => mg.Width(0))
                           .MajorTickLines(mt => mt.Width(0)).
                           MinorTickLines(mt => mt.Width(0)).LineStyle(ls => ls.Width(0))
                           // .LabelIntersectAction(Syncfusion.EJ2.Charts.LabelIntersectAction.Rotate90)
                           ).PrimaryYAxis(py => py.MajorTickLines(mt => mt.Width(0))
                           .MinorTickLines(mt => mt.Width(0)).LineStyle(ls => ls.Width(0)).Title("Sales")).Title(BarChartAmountTitle).ChartArea(area =>
                           area.Border(br => br.Color("transparent"))).Tooltip(tt => tt.Enable(true).Format("${point.tooltip}")).Render()
                            </section>
                        }

                        <section class="transCount">
                            @Html.EJS().Chart("Count").Series(series =>
                      {
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource1).Name(ViewBag.locationCountName1).Add();
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource2).Name(ViewBag.locationCountName2).Add();
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource3).Name(ViewBag.locationCountName3).Add();
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource4).Name(ViewBag.locationCountName4).Add();
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource5).Name(ViewBag.locationCountName5).Add();
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource6).Name(ViewBag.locationCountName6).Add();
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource7).Name(ViewBag.locationCountName7).Add();
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource8).Name(ViewBag.locationCountName8).Add();
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource9).Name(ViewBag.locationCountName9).Add();
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource10).Name(ViewBag.locationCountName10).Add();
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource11).Name(ViewBag.locationCountName11).Add();
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource12).Name(ViewBag.locationCountName12).Add();
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource13).Name(ViewBag.locationCountName13).Add();
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource14).Name(ViewBag.locationCountName14).Add();
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource15).Name(ViewBag.locationCountName15).Add();
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource16).Name(ViewBag.locationCountName16).Add();
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource17).Name(ViewBag.locationCountName17).Add();
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource18).Name(ViewBag.locationCountName18).Add();
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource19).Name(ViewBag.locationCountName19).Add();
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource20).Name(ViewBag.locationCountName20).Add();
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource21).Name(ViewBag.locationCountName21).Add();
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource22).Name(ViewBag.locationCountName22).Add();
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource23).Name(ViewBag.locationCountName23).Add();
                          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("x").YName("y").TooltipMappingName("text").DataSource(ViewBag.dataCountSource24).Name(ViewBag.locationCountName24).Add();
                      }).PrimaryXAxis(px => px.ValueType(Syncfusion.EJ2.Charts.ValueType.Category)
                      .MajorGridLines(mg => mg.Width(0)).LabelRotation(-30).MinorGridLines(mg => mg.Width(0)).MajorTickLines(mt => mt.Width(0)).
                      MinorTickLines(mt => mt.Width(0)).LineStyle(ls => ls.Width(0))
                      // .LabelIntersectAction(Syncfusion.EJ2.Charts.LabelIntersectAction.Rotate90)
                      ).PrimaryYAxis(py => py.MajorTickLines(mt => mt.Width(0))
                      .MinorTickLines(mt => mt.Width(0)).LineStyle(ls => ls.Width(0)).Title("Count")).Title(BarChartCountTitle).ChartArea(area =>
                      area.Border(br => br.Color("transparent"))).Tooltip(tt => tt.Enable(true).Format("${point.tooltip}")).Render()
                        </section>

                        @*@Html.EJS().Chart("Amount").Margin(mr => mr.Left(0).Top(0).Bottom(0).Right(0)).Series(series =>
                            {
                            series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column)
                            .CornerRadius(cr => cr.TopLeft(6).TopRight(6))
                            .Marker(mr => mr.DataLabel(dl =>
                            dl.Visible(true).Font(ff => ff.FontWeight("300").Color("#ffffff")).Position(Syncfusion.EJ2.Charts.LabelPosition.Top))
                            ).ColumnWidth(0.85).XName("x").YName("yValue").DataSource(ViewBag.dataSourceAmount).Width(1).Add();
                            }).PrimaryYAxis(px => px.LabelStyle(ls => ls.Color("#808080")).LineStyle(ls => ls.Width(1))
                            .MajorTickLines(mg => mg.Width(0)).MajorGridLines(mg => mg.Width(0))).PrimaryXAxis(px =>
                            px.Interval(1).ValueType(Syncfusion.EJ2.Charts.ValueType.Category).MajorGridLines(mg => mg.Width(0)).LabelRotation(0).LabelStyle(ff => ff.FontWeight("600"))
                            ).Tooltip(tt =>
                            tt.Enable(true)).ChartArea(area => area.Border(br =>
                            br.Color("transparent"))).LegendSettings(lg =>
                            lg.Visible(false)).Title(ViewBag.BarChartAmountTitle).Render()*@


                        @*@Html.EJS().Chart("Count").Margin(mr => mr.Left(0).Top(0).Bottom(0).Right(0)).Series(series =>
                            {
                            series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column)
                            .CornerRadius(cr => cr.TopLeft(6).TopRight(6))
                            .Marker(mr => mr.DataLabel(dl =>
                            dl.Visible(true).Font(ff => ff.FontWeight("300").Color("#ffffff")).Position(Syncfusion.EJ2.Charts.LabelPosition.Top))
                            ).ColumnWidth(0.85).XName("x").YName("yValue").DataSource(ViewBag.dataSourceCount).Width(1).Add();
                            }).PrimaryYAxis(px => px.LabelStyle(ls => ls.Color("#808080")).LineStyle(ls => ls.Width(1))
                            .MajorTickLines(mg => mg.Width(0)).MajorGridLines(mg => mg.Width(0))).PrimaryXAxis(px =>
                            px.Interval(1).ValueType(Syncfusion.EJ2.Charts.ValueType.Category).MajorGridLines(mg => mg.Width(0)).LabelRotation(0).LabelStyle(ff => ff.FontWeight("600"))
                            ).Tooltip(tt =>
                            tt.Enable(true)).ChartArea(area => area.Border(br =>
                            br.Color("transparent"))).LegendSettings(lg =>
                            lg.Visible(false)).Title(ViewBag.BarChartCountTitle).Render()*@


                        @*@Html.EJS().Chart("container").Palettes(ViewBag.seriesColors).Render()*@
                    </div>
                </div>

                <script id='Tooltip' type="text/x-template">
                    <div id="wrap">
                        <table style="width:100%;  border: 1px solid black;" class="table-borderless">
                            <tr>
                                <th rowspan="2" style="background-color: #C1272D">
                                    ${series.name}
                                </th>
                                <td style="height: 25px; width: 50px; background-color: #C1272D; font-size: 14px; color: #E7C554; font-weight: bold; padding-left: 5px">${x}</td>
                            </tr>
                            <tr>
                                <td style="height: 25px; width: 50px; background-color: #C1272D; font-size: 18px; color: #FFFFFF; font-weight: bold; padding-left: 5px">${y}</td>
                            </tr>
                        </table>
                    </div>
                </script>


            </div>

            <div class="col-12">

            </div>


        </div>
    </div>


</div>

@section scripts {
    <script>

        var selected = [];
        function onBegin(e) {
            this.fields = {
                text: 'Name', value: 'LocationId', itemCreated: function (e) {
                    var count = 0;
                    if (count === 0) {
                        for (let i = 0; i < e.dataSource.length; i++) {
                            if (e.curData.IsSelected == true)
                                itemSearch(e.curData.LocationId); //pass the corresponding value
                        }
                    }
                }
            }
        }

        function itemSearch(e) {
            if (selected.indexOf(e) == -1)
                selected.push(e);
        }

        function onBound(e) {
            this.value = selected;
        }

        var transAmount = $('.transAmount');
        var transCount = $('.transCount');

        var transAmountDetail = $('.transAmountDetail');
        var transCountDetail = $('.transCountDetail');

        function reportTypeChanged(args) {
            var rptTypeId = args.itemData.Id;
            if (rptTypeId === 1) {

                transAmount.show();
                transAmountDetail.show();

                transCount.hide();
                transCountDetail.hide();

            } else if (rptTypeId >= 1) {

                transCount.show();
                transCountDetail.show();

                transAmount.hide();
                transAmountDetail.hide();

            } else {

                transCount.hide();
                transCountDetail.hide();

                transAmount.hide();
                transAmountDetail.hide();
            }
        }

        $(function () {
            if ('@isAdmin' === 'True') {
                transCount.hide();
                transCountDetail.hide();
            } else {
                transAmount.hide();
                transAmountDetail.hide();

                transCount.show();
                transCountDetail.show();
            }
        });

        /* Set the width of the side navigation to 250px */
        function openNav() {
            document.getElementById("mySidenav").style.width = "300px";
        }

        /* Set the width of the side navigation to 0 */
        function closeNav() {
            document.getElementById("mySidenav").style.width = "0";
        }

    </script>
}




