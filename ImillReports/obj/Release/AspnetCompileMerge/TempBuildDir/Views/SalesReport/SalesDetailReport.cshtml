@using Syncfusion.EJ2.Grids;
@model ImillReports.ViewModels.SalesReportViewModel

@{
    ViewBag.Title = "Sales Detail Report";
    ViewBag.SubTitle = "Detailed transactions of sales";
}

<style>
    .e-grid .e-rowcell.customcss {
        font-size: 11px;
    }

    .e-grid .e-headercell.customcss {
        font-size: 11px;
    }

    .e-grid .e-summaryrow .e-summarycell, .e-grid .e-summaryrow .e-templatecell {
        font-size: 11px;
    }

    .e-headertext {
        font-size: 11px;
    }
</style>

@*<script>
        var value = window.localStorage.getItem('gridGrid'); //"gridGrid" is component name + component id.
        var model = JSON.parse(value);
        // delete model["columns"];    // remove the column from localStorage
        window.localStorage.setItem('gridGrid', JSON.stringify(model));
    </script>*@

<div class="container-fluid">
    @if (ViewBag.validation == "true")
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-danger alert-dismissible" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>
                    Start Date is Greater then End Date
                </div>
            </div>
        </div>
    }
    <div class="row clearfix">
        <div class="col-12">
            <div class="card">
                @using (Html.BeginForm("SalesDetailReport", "SalesReport", FormMethod.Get))
                {
                    @*<div class="row moreFilter">
                            <div class="col-6 mx-auto">
                                @Html.EJS().QueryBuilder("querybuilder").Width("100%").Columns(col =>
                                {
                               col.Field("Title").Label("Title").Type("string").Add();
                                }).DataSource(ViewBag.dataSource).Rule(ViewBag.rule).Render()
                            </div>
                        </div>*@

                    <div class="row pt-3 pb-0 px-3 mb-0">
                        <div class="col-2">
                            @Html.EJS().DateTimePicker("fromDate").Format("dd/MMM/yyyy hh:mm aa").Placeholder("From").Value(ViewBag.startDate).Render()
                        </div>
                        <div class="col-2">
                            @Html.EJS().DateTimePicker("toDate").Format("dd/MMM/yyyy hh:mm aa").Placeholder("To").Value(ViewBag.endDate).Render()
                        </div>
                        @if (User.IsInRole("Admin") || User.IsInRole("Sales"))
                        {
                            <div class="col-2">
                                @Html.EJS().MultiSelect("locationStringArray").ShowDropDownIcon().AllowFiltering(true).Value(ViewBag.locationVal).Placeholder("Select locations").EnableGroupCheckBox(true).DataSource(
                                (IEnumerable<object>)ViewBag.locations
                                ).Mode(Syncfusion.EJ2.DropDowns.VisualMode.CheckBox).ShowSelectAll(true).SelectAllText("Select All").UnSelectAllText("UnSelect All").Fields(
                                new Syncfusion.EJ2.DropDowns.MultiSelectFieldSettings { GroupBy = "TypeName", Text = "Name", Value = "LocationId" }).ActionBegin("onBegin").DataBound("onBound").Render()
                            </div>
                        }
                        <div class="col-1 mt-2 px-0 text-center">
                            <div class="form-group form-check">
                                <input type="checkbox" class="form-check-input m-0 p-0" id="isChecked">
                                <label class="form-check-label" for="isChecked">Prod(En)</label>
                            </div>
                        </div>

                        <div class="col-3 prodEn">
                            @Html.EJS().MultiSelect("productStringArray").ShowDropDownIcon().AllowFiltering(true).Filtering("onfiltering").Value(ViewBag.productsVal).Placeholder("Select Products").DataSource(
                           (IEnumerable<object>)ViewBag.products
                           ).Mode(Syncfusion.EJ2.DropDowns.VisualMode.CheckBox).ShowSelectAll(true).SelectAllText("Select All").UnSelectAllText("UnSelect All").Fields(
                           new Syncfusion.EJ2.DropDowns.MultiSelectFieldSettings { Text = "Name", Value = "ProductId" }).ActionBegin("onProductBegin").DataBound("onProductBound").Render()
                        </div>

                        <div class="col-3 prodAr">
                            @Html.EJS().MultiSelect("productArStringArray").ShowDropDownIcon().AllowFiltering(true).Filtering("onfilteringAr").Value(ViewBag.productsVal).EnableRtl(true).Placeholder("اختر المنتجات").DataSource(
                            (IEnumerable<object>
                                )ViewBag.products
                                ).Mode(Syncfusion.EJ2.DropDowns.VisualMode.CheckBox).ShowSelectAll(true).SelectAllText("Select All").UnSelectAllText("UnSelect All").Fields(
                                new Syncfusion.EJ2.DropDowns.MultiSelectFieldSettings { Text = "NameAr", Value = "ProductId" }).ActionBegin("onProductArBegin").DataBound("onProductArBound").Render()
                        </div>

                        @*<div class="col-2">
                                @Html.EJS().MultiSelect("baseUnitStringArray").ShowDropDownIcon().Value(ViewBag.baseUnitsVal).Placeholder("Select Base Unit").DataSource(
                               (IEnumerable<object>)ViewBag.baseUnits
                               ).Mode(Syncfusion.EJ2.DropDowns.VisualMode.CheckBox).ShowSelectAll(true).SelectAllText("Select All").UnSelectAllText("UnSelect All").Fields(
                               new Syncfusion.EJ2.DropDowns.MultiSelectFieldSettings { Text = "L_Unit_Name", Value = "Unit_Cd" }).ActionBegin("onBaseUnitBegin").DataBound("onBaseUnitBound").Render()
                            </div>*@

                        <div class="col-2">
                            @Html.EJS().MultiSelect("voucherTypeStringArray").ShowDropDownIcon().AllowFiltering(true).Filtering("onVoucherTypefiltering").Value(ViewBag.voucherTypesVal).Placeholder("Select Voucher").DataSource(
                           (IEnumerable<object>)ViewBag.voucherTypes
                           ).Mode(Syncfusion.EJ2.DropDowns.VisualMode.CheckBox).ShowSelectAll(true).SelectAllText("Select All").UnSelectAllText("UnSelect All").Fields(
                           new Syncfusion.EJ2.DropDowns.MultiSelectFieldSettings { Text = "L_Voucher_Name", Value = "Voucher_Type" }).ActionBegin("onVoucherTypeBegin").DataBound("onVoucherTypeBound").Render()
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-2 py-2 mx-auto">
                            @*<button type="button" class="btn btn-raised bg-blue-grey waves-effect waves-light btnMoreFilter">More Filter</button>*@
                            @*<button type="submit" class="btn btn-raised bg-black waves-effect waves-light">Get Records</button>*@
                            <button type="button" class="btn btn-raised bg-black waves-effect waves-light getRecords">Get Records</button>
                        </div>
                    </div>

                }
            </div>
            <div class="card mt-3">
                <div class="body">
                    <div class="preloader loading">
                        <span class="slice"></span>
                        <span class="slice"></span>
                        <span class="slice"></span>
                        <span class="slice"></span>
                        <span class="slice"></span>
                        <span class="slice"></span>
                    </div>
                    <h5 class="text-center loading-text mt-2">Loading...</h5>

                    @Html.EJS().Grid("Grid").DataSource(
                   (IEnumerable<object>)
                   ViewBag.DataSource).EnablePersistence(false).ActionBegin("onActionBegin").AllowResizing(true).AllowExcelExport().ToolbarClick("toolbarClick").ActionComplete(
                   "afterFilterOpen").Height("400").Width("auto").ShowColumnChooser(true).Columns(col =>
               {
                   col.Field("Location").Width("80").TextAlign(TextAlign.Center).Visible(ViewBag.Location).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("InvDateTime").Width("100").HeaderText("Date").TextAlign(TextAlign.Center).Visible(ViewBag.InvDateTime).Format(new { type = "dateTime", format = "dd/MMM/yyyy hh:mm a" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("Salesman").Width("80").TextAlign(TextAlign.Center).Visible(ViewBag.Salesman).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("InvoiceNumber").HeaderText("Invoice").Width("80").TextAlign(TextAlign.Center).Visible(ViewBag.InvoiceNumber).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("CustomerName").HeaderText("Cust Name").Width("100").TextAlign(TextAlign.Center).Visible(ViewBag.CustomerName).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("CustomerNameAr").HeaderText("Cust Name(Ar)").Width("100").TextAlign(TextAlign.Center).Visible(ViewBag.CustomerNameAr).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("Voucher").Width("100").TextAlign(TextAlign.Center).Visible(ViewBag.Voucher).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("ProductNameEn").HeaderText("Prod (En)").Width("100").Visible(ViewBag.ProductNameEn).TextAlign(TextAlign.Center).Filter(new { type = "Menu" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("ProductNameAr").HeaderText("Prod (Ar)").Width("100").Visible(ViewBag.ProductNameAr).TextAlign(TextAlign.Center).Filter(new { type = "Menu" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("BaseQuantity").HeaderText("Base Qty").Width("100").Visible(ViewBag.BaseQuantity).TextAlign(TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("BaseUnit").HeaderText("Base Unit").Width("100").Visible(ViewBag.BaseUnit).TextAlign(TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("SellQuantity").HeaderText("Sell Qty").Width("100").Visible(ViewBag.SellQuantity).TextAlign(TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("SellUnit").HeaderText("Sell Unit").Width("100").Visible(ViewBag.SellUnit).TextAlign(TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("Discount").Width("80").Format("N3").Visible(ViewBag.Discount).TextAlign(TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("Amount").Width("80").Format("N3").Visible(ViewBag.Amount).TextAlign(TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();

               }).AllowPaging(true).AllowSorting(true).AllowFiltering().FilterSettings(filter => filter.Type(FilterType.Menu)).PageSettings(
                   page => { page.PageSizes(true); page.PageSize(25); }).Toolbar(new List<string>() { "Search", "Print", "ExcelExport", "ColumnChooser" }).Aggregates(agg =>
                        {
                       agg.Columns(new List<GridAggregateColumn>() {
                            new GridAggregateColumn() {
                               Field = "Discount", Format= "N3", Type = "Sum", FooterTemplate = "${Sum}"
                           },
                           new GridAggregateColumn() {
                               Field = "Amount", Format= "N3", Type = "Sum", FooterTemplate = "${Sum}"
                           },
                           new GridAggregateColumn() {
                               Field = "SellQuantity", Format= "N3", Type = "Sum", FooterTemplate = "${Sum}"
                           } }).Add();
                        }).DataBound("dataBound").Load("load").Render()

                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>

        $('.preloader').hide();
        $('.loading-text').hide();
        $('.prodEn').hide();
        var prodEnCheck = false;

        function dataBound(args) {
            this.autoFitColumns(['Location', 'InvDateTime', 'InvoiceNumber', 'Voucher', 'BaseQuantity', 'BaseUnit', 'SellQuantity', 'SellUnit', 'Discount', 'Amount']);
        }

        function afterFilterOpen(args) {
            if (args.requestType == "filterafteropen" && (args.columnName == "ProductNameEn" || args.columnName == "ProductNameAr")) {
                args.filterModel.dlgDiv.querySelector('input').ej2_instances[0].value = 'contains';
            }
        }

        $('#isChecked').change(function () {
            if (this.checked) {
                $('.prodEn').show();
                $('.prodAr').hide();
                prodEnCheck = true;
            } else {
                $('.prodEn').hide();
                $('.prodAr').show();
                prodEnCheck = false;
            }
        });

        function load() {
            var grid = document.getElementById('Grid').ej2_instances[0];
            var rowHeight = grid.getRowHeight();  //height of the each row
            var gridHeight = grid.height;  //grid height
            var pageSize = grid.pageSettings.pageSize;   //initial page size
            var pageResize = 25; //new page size is obtained here
            grid.pageSettings.pageSize = pageSize + Math.round(pageResize);
        }

        function onfiltering(e) {
            var CBObj = document.getElementById("productStringArray").ej2_instances[0];
            if (e.text == '')
                e.updateData(CBObj.dataSource);
            else {
                var query = new ej.data.Query().from('productStringArray').select(['Name', 'ProductId']);
                query = (e.text !== '') ? query.where('Name', 'contains', e.text, true) : query;
                e.updateData(CBObj.dataSource, query);
            }
        }

        function onfilteringAr(e) {
            var CBObj = document.getElementById("productArStringArray").ej2_instances[0];
            if (e.text == '')
                e.updateData(CBObj.dataSource);
            else {
                var query = new ej.data.Query().from('productArStringArray').select(['NameAr', 'ProductId']);
                query = (e.text !== '') ? query.where('NameAr', 'contains', e.text, true) : query;
                e.updateData(CBObj.dataSource, query);
            }
        }

        function onVoucherTypefiltering(e) {
            var CBObj = document.getElementById("voucherTypeStringArray").ej2_instances[0];
            if (e.text == '')
                e.updateData(CBObj.dataSource);
            else {
                var query = new ej.data.Query().from('voucherTypeStringArray').select(['L_Voucher_Name', 'Voucher_Type']);
                query = (e.text !== '') ? query.where('L_Voucher_Name', 'contains', e.text, true) : query;
                e.updateData(CBObj.dataSource, query);
            }
        }

        function toolbarClick(args) {
            var gridObj = document.getElementById("Grid").ej2_instances[0];
            if (args.item.id === 'Grid_excelexport') {
                var excelExportProperties = {
                    fileName: "SalesDetailReport.xlsx"
                };
                gridObj.excelExport(excelExportProperties);
            }
        }

        $(document).ready(function () {
            $('#locationDiv .bootstrap-select button').remove();
            $('#locationDiv .bootstrap-select').removeAttr("class");
            $(".moreFilter").toggle();

            //var gridObj = document.getElementById("Grid").ej2_instances[0];
            //console.log(gridObj);
            //gridObj.enablePersistence = true;
        });

        var callCount = 0;
        function onActionBegin(args) {
            if (args.requestType === "filterchoicerequest") {
                // Filter choice count is modified
                args.filterChoiceCount = 30000;
            }

            var columns = [];
            if (args.requestType == "columnstate") {

                callCount += 1;

                if (callCount > 1) {
                    setTimeout(function () {
                        callCount = 0;
                        console.log('Reset to : ', callCount);
                    }, 3000);

                    var gridObj = document.getElementById("Grid").ej2_instances[0];

                    gridObj.columnModel.forEach(function (item) {
                        var column = {
                        "FieldName": item.field,
                        "FieldValue": item.visible
                    };

                    columns.push(column);
                })

                // console.log('Value of columns : ', columns);

                    $.ajax({
                        async: true,
                        type: "POST",
                        url: '@Url.Action("SaveColumnChooser", "SalesReport")',
                        data: {
                            columnChooserItems: columns
                            //pageName: "SalesDetailReport"
                        },
                        success: function (result) {
                            // alert('Completed');
                        },
                        error: function (xhr) {
                            alert(xhr.responseText);
                        }
                    });
                }
                // SalesReport
                // SaveColumnChooser
            }
        }

        var selected = [];
        function onBegin(e) {
            this.fields = {
                text: 'Name', value: 'LocationId', itemCreated: function (e) {
                    var count = 0;
                    if (count === 0) {
                        for (let i = 0; i < e.dataSource.length; i++) {
                            if (e.curData.IsSelected == true)
                                itemSearch(e.curData.LocationId); //pass the corresponding value
                        }
                    }
                }
            }
        }

        function itemSearch(e) {
            if (selected.indexOf(e) == -1)
                selected.push(e);
        }

        function onBound(e) {
            this.value = selected;
        }



        var selectedVoucherType = [];
        function onVoucherTypeBegin(e) {
            this.fields = {
                text: 'L_Voucher_Name', value: 'Voucher_Type', itemCreated: function (e) {
                    var count = 0;
                    if (count === 0) {
                        for (let i = 0; i < e.dataSource.length; i++) {
                            if (e.curData.IsSelected == true)
                                itemVoucherTypeSearch(e.curData.Voucher_Type); //pass the corresponding value
                        }
                    }
                }
            }
        }

        function itemVoucherTypeSearch(e) {
            if (selectedVoucherType.indexOf(e) == -1)
                selectedVoucherType.push(e);
        }

        function onVoucherTypeBound(e) {
            this.value = selectedVoucherType;
        }



        var selectedProduct = [];
        function onProductBegin(e) {
            this.fields = {
                text: 'Name', value: 'ProductId', itemCreated: function (e) {
                    var count = 0;
                    if (count === 0) {
                        for (let i = 0; i < e.dataSource.length; i++) {
                            if (e.curData.IsSelected == true)
                                itemProductSearch(e.curData.ProductId); //pass the corresponding value
                        }
                    }
                }
            }
        }

        function itemProductSearch(e) {
            if (selectedProduct.indexOf(e) == -1)
                selectedProduct.push(e);
        }

        function onProductBound(e) {
            this.value = selectedProduct;
        }

        var selectedProductAr = [];
        function onProductArBegin(e) {
            this.fields = {
                text: 'NameAr', value: 'ProductId', itemCreated: function (e) {
                    var count = 0;
                    if (count === 0) {
                        for (let i = 0; i < e.dataSource.length; i++) {
                            if (e.curData.IsSelected == true)
                                itemProductSearch(e.curData.ProductId); //pass the corresponding value
                        }
                    }
                }
            }
        }

        function itemProductArSearch(e) {
            if (selectedProductAr.indexOf(e) == -1)
                selectedProductAr.push(e);
        }

        function onProductArBound(e) {
            this.value = selectedProductAr;
        }


        //var selectedBaseUnit = [];
        //function onBaseUnitBegin(e) {
        //    this.fields = {
        //        text: 'L_Unit_Name', value: 'Unit_Cd', itemCreated: function (e) {
        //            var count = 0;
        //            if (count === 0) {
        //                for (let i = 0; i < e.dataSource.length; i++) {
        //                    if (e.curData.IsSelected == true)
        //                        itemBaseUnitSearch(e.curData.Unit_Cd); //pass the corresponding value
        //                }
        //            }
        //        }
        //    }
        //}

        //function itemBaseUnitSearch(e) {
        //    if (selectedBaseUnit.indexOf(e) == -1)
        //        selectedBaseUnit.push(e);
        //}

        //function onBaseUnitBound(e) {
        //    this.value = selectedBaseUnit;
        //}

        $(".getRecords").click(function () {

            var i = 1;
            setInterval(function () {
                i++;
            }, 1000);

            $('.preloader').show();
            $('.loading-text').show();
            $('.e-grid').hide();

            var fromDate = $('#fromDate').val();
            var toDate = $('#toDate').val();

            var grid = document.getElementById('Grid').ej2_instances[0]; // Grid instance
            // var locationObj = document.getElementById('locationStringArray').ej2_instances[0]; // MultiSelect Instance of location
            var locationObj = '@User.IsInRole("Admin")' === 'True' || '@User.IsInRole("Sales")' === 'True' ? document.getElementById('locationStringArray').ej2_instances[0].value : ["84","1"]; // MultiSelect Instance of location
            var productObj = document.getElementById('productStringArray').ej2_instances[0]; // MultiSelect Instance of product
            var productArObj = document.getElementById('productArStringArray').ej2_instances[0]; // MultiSelect Instance of product
            var vouchertypeObj = document.getElementById('voucherTypeStringArray').ej2_instances[0]; // MultiSelect Instance of voucher Type

            $.ajax({
                type: 'POST',
                data: {
                    from: fromDate.toString(),
                    to: toDate.toString(),
                    locations: locationObj.toString(),
                    voucher: vouchertypeObj.value.toString(),
                    product: productObj.value.toString(),
                    productAr: productArObj.value.toString(),
                    isChecked: prodEnCheck
                },
                url: '@Url.Action("GetSalesDetailReport", "SalesReport")',
                dataType: 'json',
                success: function (response) {
                    console.log('Total Time Taken: ', i);
                    $('.preloader').hide();
                    $('.loading-text').hide();
                    $('.e-grid').show();

                    console.log(response);
                    grid.dataSource = response;
                    grid.refresh();
                },
                error: function (ex) {
                    alert(ex);
                    $('.preloader').hide();
                }

            });



            //var ajax = new ej.base.Ajax('/SalesReport/GetView', 'GET');
            //ajax.data = { from: fromDate.toString(), to: toDate.toString() };
            //ajax.send();
            //ajax.onSuccess = function (data) {
            //    console.log(data);
            //    console.log(grid);
            //    grid.dataSource = JSON.parse(data);
            //    grid.refresh();
            //};

            //ajax.onError = function () {
            //    alert("Error Occured Contact Administrator!");
            //}
        });

        $(".btnMoreFilter").click(function () {
            $(".moreFilter").toggle(function () {
                $('.moreFilter').animate({
                    opacity: 1
                }, 500);
            });

             $(".sales").load("/SalesReport/GetView");
        });

    </script>
}