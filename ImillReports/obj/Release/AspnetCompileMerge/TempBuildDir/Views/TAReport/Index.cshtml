
@{
    ViewBag.Title = "Time Attendance Report";
    ViewBag.SubTitle = "All transactions of Time and Attendance as report";

    List<object> toolbarItems = new List<object>();
    toolbarItems.Add("Search");
    toolbarItems.Add("Print");
    toolbarItems.Add("ExcelExport");
    toolbarItems.Add("ColumnChooser");
    toolbarItems.Add(new { text = "Delete Record(s)", tooltipText = "Delete the transaction records", id = "deleteRecords", prefixIcon = "e-delete" });
}

<style>
    .e-grid .e-rowcell.customcss {
        font-size: 11px;
    }

    .e-grid .e-headercell.customcss {
        font-size: 11px;
    }

    .e-grid .e-summaryrow .e-summarycell, .e-grid .e-summaryrow .e-templatecell {
        font-size: 11px;
    }

    .e-headertext {
        font-size: 11px;
    }

    .e-radio + label .e-label {
        padding-left: 0 !important;
        padding-right: 15px !important;
    }

    [type="radio"]:checked + label:after {
        border: 0 !important;
    }

    .light-orange {
        background-color: #EF8823;
        color: #fff;
        text-align: center;
    }

    .late-red {
        background-color: #E61A23;
        color: #fff;
        text-align: center;
    }
</style>


@Html.EJS().Toast("success-toast").Position(p => p.X("Center")).NewestOnTop(true).ShowCloseButton(true).ShowProgressBar(true).CssClass("e-toast-success").Icon("e-success toast-icons").Title("Record Updated").Content("Record(s) Deleted").Render()
@Html.EJS().Toast("error-toast").Position(p => p.X("Center")).NewestOnTop(true).ShowCloseButton(true).ShowProgressBar(true).CssClass("e-toast-danger").Icon("e-error toast-icons").Title("Updating Failed").Content("Record could not be delete! Please try again by refereshing page").Render()
@Html.EJS().Toast("info-toast").Position(p => p.X("Center")).NewestOnTop(true).ShowCloseButton(true).ShowProgressBar(true).CssClass("e-toast-info").Icon("e-info toast-icons").Title("Information!").Content("Please select atleast 1 record").Render()


<div class="container-fluid">

    @*<div class="row">
            <div class="col-6 mx-auto text-center">
                <h2 class="bg-yellow text-dark">Under Development</h2>
            </div>
        </div>*@
    @if (ViewBag.validation == "true")
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-danger alert-dismissible" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>
                    Start Date is Greater then End Date
                </div>
            </div>
        </div>
    }
    <div class="row clearfix">
        <div class="col-12">
            <div class="card">
                @using (Html.BeginForm("Index", "TAReport", FormMethod.Get))
                {
                    <div class="row p-3">
                        <div class="col-2">
                            @Html.EJS().DatePicker("fromDate").Format("dd/MMM/yyyy").Value(ViewBag.startDate).Render()
                        </div>
                        <div class="col-2">
                            @Html.EJS().DatePicker("toDate").Format("dd/MMM/yyyy").Value(ViewBag.endDate).Render()
                        </div>

                        <div class="col-3">

                            @Html.EJS().MultiSelect("employees").ShowDropDownIcon().AllowFiltering(true).Value(ViewBag.employeesVal).Filtering("onEmployeesfiltering").Placeholder("Select Employees").DataSource(
                         (IEnumerable<object>)ViewBag.Employees
                         ).Mode(Syncfusion.EJ2.DropDowns.VisualMode.CheckBox).ShowSelectAll(true).SelectAllText("Select All").UnSelectAllText("UnSelect All").Fields(
                         new Syncfusion.EJ2.DropDowns.MultiSelectFieldSettings { Text = "DisplayText", Value = "EmployeeId" }).ActionBegin("onEmployeesBegin").DataBound("onEmployeesBound").Render()

                        </div>

                        <div class="col-3 pt-2">
                            @Html.EJS().RadioButton("default").Label("Default").Name("type").Value("default").Checked(ViewBag.type == "default").Render()
                            @Html.EJS().RadioButton("showall").Label("Show All").Name("type").Value("showall").Checked(ViewBag.type == "showall").Render()
                            @Html.EJS().RadioButton("notScanned").Label("Not Scanned").Name("type").Value("notScanned").Checked(ViewBag.type == "notScanned").Render()
                        </div>

                        <div class="col-2">
                            <button type="submit" class="btn btn-raised bg-black waves-effect waves-light">Get Records</button>
                        </div>
                    </div>
                }
            </div>
            <div class="card mt-3">

                <div class="body">
                    <div class="control-section">
                        @Html.EJS().Grid("Grid").DataSource((IEnumerable<object>)ViewBag.DataSource).AllowResizing(true).AllowExcelExport().ToolbarClick("toolbarClick").Height("400").Width("auto").ShowColumnChooser(true).Columns(col =>
                   {
                       col.Field("Oid").Width("30").ShowInColumnChooser(false).Visible(false).Add();
                       col.Field("IsVerified").Type("checkbox").Width("30").AllowFiltering(false).AllowSorting(false).Add();
                       col.Field("TransDate").Width("100").HeaderText("Date").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Format(new { type = "dateTime", format = "dd/MMM/yyyy" }).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("EmployeeId").Width("80").HeaderText("Emp Id").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("EmployeeNameAr").HeaderText("Employee Ar").Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("EmployeeName").HeaderText("Employee En").Width("80").Visible(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("Status").Template("#statusTemplate").Width("100").AllowFiltering(false).AllowSorting(false).Add();
                       col.Field("IsOnLeave").ShowInColumnChooser(false).Visible(false).Add();
                       col.Field("Location").HeaderText("Emp Location").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("DeviceCode").Width("80").HeaderText("Device Code").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("TemperatureIn").HeaderText("Temperature In").Width("80").Format("N3").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("TemperatureOut").HeaderText("Temperature Out").Width("80").Format("N3").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("ShiftStart").HeaderText("Shift Start").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("ShiftEnd").Width("100").HeaderText("Shift End").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("PunchIn").Width("100").HeaderText("Punch In").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Format(new { type = "dateTime", format = "hh:mm:ss a" }).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("PunchOut").Width("100").HeaderText("Punch Out").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Format(new { type = "dateTime", format = "hh:mm:ss a" }).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("LateIn").HeaderText("Late In").Template("#lateInTemplate").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("IsLateIn").ShowInColumnChooser(false).Visible(false).Add();
                       col.Field("IsLateIn5Min").ShowInColumnChooser(false).Visible(false).Add();
                       col.Field("EarlyOut").HeaderText("Early Out").Template("#earlyOutTemplate").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("IsEarlyOut").ShowInColumnChooser(false).Visible(false).Add();
                       col.Field("IsEarlyOut5Min").ShowInColumnChooser(false).Visible(false).Add();
                       col.Field("TotalWorkingHours").Visible(false).HeaderText("Total Hours Worked").Width("100").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("ConvTotalHoursWorked").HeaderText("Total Hours Worked").Width("80").Format("N2").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).CustomAttributes(new { @class = "customcss" }).Add();
                       col.Field("IsOpened").Width("80").DisplayAsCheckBox(true).HeaderText("Is opened for backdated entry").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Filter(new { type = "CheckBox" }).Visible(false).CustomAttributes(new { @class = "customcss" }).Add();

                   }).AllowPaging(true).AllowSorting(true).AllowFiltering().FilterSettings(filter => filter.Type(Syncfusion.EJ2.Grids.FilterType.Menu)).PageSettings(
                       page => { page.PageSizes(true); page.PageSize(25); }).Toolbar(toolbarItems).DataBound("dataBound").Aggregates(agg =>
                       {
                           agg.Columns(new List<Syncfusion.EJ2.Grids.GridAggregateColumn>() {
                               new Syncfusion.EJ2.Grids.GridAggregateColumn() {
                                   Field = "TotalWorkingHours", Format= "N3", Type = "Sum", FooterTemplate = "${Sum}"
                               }
                           }).Add();
                       }).RowSelected("OnSelected").RowDeselected("OnDeselected").SelectionSettings(select =>
                           select.Type(Syncfusion.EJ2.Grids.SelectionType.Multiple).CheckboxOnly(true)).Render()

                    </div>

                    <script id="lateInTemplate" type="text/x-template">

                        <div class="template_checkbox">
                            ${if(IsLateIn === 'true')}
                                <div class="late-red">${LateIn}</div>
                            ${else if(IsLateIn5Min === 'true')}
                                <div class="light-orange">${LateIn}</div>
                            ${else}
                                <div>${LateIn}</div> ${/if}
                        </div>

                    </script>

                    <script id="statusTemplate" type="text/x-template">

                        <div class="template_checkbox">
                            ${if(IsOnLeave === 'true')}
                                <div class="late-red">On Leave</div>
                            ${else}
                                <div>Active</div> ${/if}
                        </div>

                    </script>

                    <script id="earlyOutTemplate" type="text/x-template">

                        <div class="templates_checkbox">
                            ${if(IsEarlyOut === 'true')}
                                <div class="late-red">${EarlyOut}</div>
                            ${else if(IsEarlyOut5Min === 'true')}
                                <div class="light-orange">${EarlyOut}</div>
                            ${else}
                                <div>${EarlyOut}</div> ${/if}
                        </div>

                    </script>

                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {



    <script>

        var verificationIds = [];

        function dataBound(args) {
            this.autoFitColumns(['Location']);
        }


        function dataBound(args) {
            this.autoFitColumns(['IsVerified', 'TransDate', 'EmployeeId', 'EmployeeName', 'Location', 'TemperatureIn', 'TemperatureOut', 'ShiftStart', 'ShiftEnd', 'PunchIn', 'PunchOut', 'LateIn', 'EarlyOut', 'TotalWorkingHours', 'DeviceCode', 'IsOpened']);
        }


        function toolbarClick(args) {
            var gridObj = document.getElementById("Grid").ej2_instances[0];
            if (args.item.id === 'Grid_excelexport') {
                var excelExportProperties = {
                    fileName: "TimeAttendanceReport.xlsx"
                };
                gridObj.excelExport(excelExportProperties);
            }

            if (args.item.id == 'deleteRecords') {

            if (verificationIds.length === 0) {
                setTimeout(() => {
                    var toastObj = document.getElementById('info-toast').ej2_instances[0];
                    toastObj.target = document.body;
                    toastObj.show();
                }, 1000);
            } else {
                $.ajax({
                    type: 'POST',
                    data: {
                        verifiedIds: verificationIds
                    },
                    url: '@Url.Action("DeleteTransactions", "TAReport")',
                    success: function (response) {

                        console.log("f : ", response);
                        if (response === "True") {
                            setTimeout(() => {
                                var toastObj = document.getElementById('success-toast').ej2_instances[0];
                                toastObj.target = document.body;
                                toastObj.show();
                            }, 1000);

                            verificationIds = [];

                            window.location.reload();

                        } else {
                            setTimeout(() => {
                                var toastObj = document.getElementById('error-toast').ej2_instances[0];
                                toastObj.target = document.body;
                                toastObj.show();
                            }, 1000);
                        }
                },
                    error: function (ex) {
                        setTimeout(() => {
                            var toastObj = document.getElementById('error-toast').ej2_instances[0];
                            toastObj.target = document.body;
                            toastObj.show();
                        }, 1000);
                    }
                });

            }
            }
        }

        function OnSelected(args) {
            if (typeof args.data.Oid === 'undefined') {
                verificationIds = [];
                args.data.forEach(function (item, i) {
                    verificationIds.push(item.Oid);
                });
            } else {
                var selectedId = args.data.Oid;
                verificationIds.push(selectedId);
            }
        }

        function OnDeselected(args) {
            if (args.row.length === 0) {
            } else {
                if (args.row.length > 1) {
                    verificationIds = [];
                } else {
                    var deselectedId = +(args.row[0].cells[1].innerHTML);
                    verificationIds.some(function (item, i) {
                        if (item === deselectedId) {
                            verificationIds.splice(i, 1);
                        }
                    });
                }
            }
        }



        // ***********************  Employees Filtering and Searching  ***********************

        function onEmployeesfiltering(e) {
            var CBObj = document.getElementById("employees").ej2_instances[0];
            if (e.text == '')
                e.updateData(CBObj.dataSource);
            else {
                var query = new ej.data.Query().from('employees').select(['DisplayText', 'EmployeeId']);
                query = (e.text !== '') ? query.where('DisplayText', 'contains', e.text, true) : query;
                e.updateData(CBObj.dataSource, query);
            }
        }

        var selectedEmployees = [];
        function onEmployeesBegin(e) {
            this.fields = {
                text: 'DisplayText', value: 'EmployeeId', itemCreated: function (e) {
                    var count = 0;
                    if (count === 0) {
                        for (let i = 0; i < e.dataSource.length; i++) {
                            if (e.curData.IsSelected == true)
                                EmployeesSearch(e.curData.EmployeeId); //pass the corresponding value
                        }
                    }
                }
            }
        }

        function EmployeesSearch(e) {
            if (selectedEmployees.indexOf(e) == -1)
                selectedEmployees.push(e);
        }

        function onEmployeesBound(e) {
            this.value = selectedEmployees;
        }

        // ***********************  Employees Filtering and Searching  ***********************

        function customiseCell(args) {

            if (args.column.field === 'LateIn') {
                console.log(args.data['LateIn']);
            }

            if (args.column.field === 'IsLateIn') {
                if (args.data['IsLateIn'] === true) {
                    var oid = args.data.Oid;
                    args.cell.classList.add('late-red');
                }
            }

            if (args.column.field === 'IsLateIn5Min') {
                if (args.data['IsLateIn5Min'] === true) {
                    args.cell.classList.add('light-orange');
                }
            }

            if (args.column.field === 'IsEarlyOut') {
                if (args.data['IsEarlyOut'] === true) {
                    args.cell.classList.add('late-red');
                }
            }

            if (args.column.field === 'IsEarlyOut5Min') {
                if (args.data['IsEarlyOut5Min'] === true) {
                    args.cell.classList.add('light-orange');
                }
            }

        }

    </script>
}

