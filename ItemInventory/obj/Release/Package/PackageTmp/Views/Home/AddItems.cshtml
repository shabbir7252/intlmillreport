@{
    ViewBag.Title = "أضف العناصر";

    List<object> toolbarItems = new List<object>();
    toolbarItems.Add("Search");
    List<object> commands = new List<object>();
    commands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "delete" } });
    // toolbarItems.Add("Print");
    // toolbarItems.Add("ExcelExport");
    // toolbarItems.Add("ColumnChooser");

    // TODO:
    // 8. Update quantity :
    //      (Pending) i.  Edit popup / Increase button to add quantity.
    //      (Done)    ii. If new value is added with same date, unitid and itemid then add that newly added quantity in node.

    // DONE :
    // 1. Add Datetime, ItemId, UnitId, Quantity, Add to grid button, save button.
    // 2. Add to grid button functionality to add the item in itemList.
    // 3. Add Grid to show record from itemList.
    // 4. Write a success function :
    //      i.  Add a bootstrap modal and show if value is not saved.
    //      ii. In same bootstrap modal show exit button to list view or continue to add and remain on same page.
    //          Also clear the grid and itemlist in JS function.
    //     iii. For error do the same with only okay button.
    // 5. Delete the values through checkbox selection or on node.
    // 6. After saving redirect to print page to print the currently saved list.
    // 7. Configure the design with mobile responsive.
    // 9. Add clear grid
}


<style>
    .fixed-top {
        z-index: 1 !important;
    }

    #items_popup > .e-content > ul > li, 
    #users_popup > .e-content > ul > li, 
    #unit_popup > .e-content > ul > li {
        font-size: 16px;
    }
</style>

<div class="container">
    <div class="row">
        <div class="col-12 mt-4 loading-placeholder" style="display:none">
            <div class="d-flex align-items-center mb-3">
                <strong><span class="loading-text"></span></strong>
                <div class="spinner-border ml-auto" role="status" aria-hidden="true"></div>
            </div>
        </div>
    </div>
</div>

<div class="container inv-grid-container mb-5">
    @if (ViewBag.validation == "true")
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-danger alert-dismissible" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>
                    Start Date is Greater then End Date
                </div>
            </div>
        </div>
    }

    <div class="row mt-3">
        <div class="col-12">

            <div class="card">
                <div class="card-body">
                    <div class="row">

                        <div class="col-12">
                            @Html.EJS().DatePicker("transDate").Format("dd-MM-yyyy").Value(ViewBag.TransDate).EnableRtl(true).Placeholder("تاريخ").Value(ViewBag.transDate).Render()
                        </div>

                        @*<div class="col-12 mt-4">
                                @Html.EJS().MultiSelect("items").ShowDropDownIcon().AllowFiltering(true).Filtering("OnItemFiltering").Placeholder("Select Items").DataSource(
                                (IEnumerable<object>)ViewBag.Items
                                ).Mode(Syncfusion.EJ2.DropDowns.VisualMode.CheckBox).ShowSelectAll(true).SelectAllText("Select All").UnSelectAllText("UnSelect All").Fields(
                                new Syncfusion.EJ2.DropDowns.MultiSelectFieldSettings { Text = "NameEn", Value = "Oid" }).Change("OnItemChange").ActionBegin("OnItemBegin").DataBound("OnItemBound").Render()
                            </div>*@

                        <div class="col-12 mt-4 item-container">
                            @Html.EJS().DropDownList("items").Enabled(true).AllowFiltering(true).EnableRtl(true).Filtering("OnItemFiltering").Placeholder("حدد العناصر").DataSource(
                          (IEnumerable<object>)ViewBag.Items).Fields(
                          new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings { Text = "NameAr", Value = "Oid" }).Change("OnItemChange").ActionBegin("OnItemBegin").DataBound("OnItemBound").Render()
                        </div>

                        <div class="col-12 mt-4">
                            @Html.EJS().DropDownList("unit").Enabled(true).AllowFiltering(true).EnableRtl(true).Filtering("OnUnitFiltering").Placeholder("وحدة").DataSource(
                          (IEnumerable<object>)ViewBag.Units).Fields(
                          new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings { Text = "NameAr", Value = "Oid" }).ActionBegin("OnUnitBegin").DataBound("OnUnitBound").Render()
                        </div>

                        <div class="col-12 mt-4">
                            @Html.EJS().TextBox("quantity").Placeholder("كمية").Type("number").EnableRtl(true).Render()
                        </div>

                        <div class="col-8 mt-4 mx-auto">
                            <button type="button" class="btn btn-secondary btn-sm btn-block add-to-grid" onclick="AddToGrid()">إضافة إلى شبكة الجدول</button>
                        </div>

                        @*<div class="col-6">
                                <button type="button" class="btn btn-primary btn-block btn-sm btn-block save-items" onclick="SaveItems()">Save</button>
                            </div>*@

                    </div>
                </div>
            </div>

        </div>
    </div>

    <div class="row mt-5">

        <div class="col-12">

            @Html.EJS().Grid("Grid").EnableRtl(true).Height("auto").Width("auto").Columns(col =>
       {
           col.Field("TransDate").Visible(false).Width("100").HeaderText("تاريخ").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Add();
           col.Field("ItemName").Width("80").HeaderText("اسم العنصر").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Add();
           col.Field("UnitName").Width("80").HeaderText("إسم الوحدة").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Add();
           col.Field("Quantity").Width("80").HeaderText("كمية").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Add();
           col.HeaderText("Actions").Width("120").Commands(commands).Add();
       }).DataBound("dataBound").CommandClick("commandClick").Toolbar(toolbarItems).Render()
        </div>

        <div class="col-12 mb-4 mt-5">
            @Html.EJS().DropDownList("users").AllowFiltering(true).EnableRtl(true).Filtering("OnUserFiltering").ShowClearButton(true).Placeholder("اختر اسم المستخدم").DataSource(
          (IEnumerable<object>)ViewBag.Users).Fields(
          new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings { Text = "FullnameAr", Value = "Oid" }).ActionBegin("OnUserBegin").DataBound("OnUserBound").Render()
        </div>
        <div class="col-12 ">
            @Html.EJS().TextBox("comments").Multiline(true).EnableRtl(true).Placeholder("ملاحظات").Created("createHandler").Input("inputHandler").Render()
        </div>

        <div class="col-6 mt-4">
            <button type="button" class="btn btn-info btn-block btn-sm btn-block clear-items" title="Clear Grid" onclick="ClearGrid()">صافي</button>
        </div>

        <div class="col-6 mt-4">
            <button type="button" class="btn btn-primary btn-block btn-sm btn-block save-items" onclick="SaveItems()">حفظ</button>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="response-message" tabindex="-1" role="dialog" aria-labelledby="ResponseMessageLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <h3 class="text-center modal-message"></h3>
                </div>
                <div class="modal-footer">
                    <button type="button" style="margin: 0 auto !important;" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

</div>


@section scripts{

    <script>
        var itemList = [];
        var btnSave = $('.save-items');
        CheckItemList();

        function DisableSaveBtn() {
            btnSave.prop('disabled', true);
        }

        function EnableSaveBtn() {
            btnSave.prop('disabled', false);
        }

        function CheckItemList() {
            if (itemList.length > 0) {
                EnableSaveBtn();
            } else {
                DisableSaveBtn()
            }
        }

        function dataBound(args) {
            this.autoFitColumns(['TransDate', 'ItemName', 'UnitName', 'Quantity']);
        }

        function commandClick(args) {
            var type = args.commandColumn.type;

            if (type === 'Delete') {
                var grid = document.getElementById('Grid').ej2_instances[0];
                var gridDs = grid.dataSource;

                gridDs.some(function (elem, i) {
                    if (elem.ItemId === args.rowData.ItemId) {
                        gridDs.splice(i, 1);
                    }
                });

                if (gridDs.length === 0) {
                    ClearGrid();
                } else {
                    grid.dataSource = gridDs;
                    grid.refresh();
                }
            }
        }

        // ***********************  Item Filtering and Searching  ***********************

        function OnItemFiltering(e) {
            var CBObj = document.getElementById("items").ej2_instances[0];
            if (e.text == '')
                e.updateData(CBObj.dataSource);
            else {
                var query = new ej.data.Query().from('items').select(['NameAr', 'Oid']);
                query = (e.text !== '') ? query.where('NameAr', 'contains', e.text, true) : query;
                e.updateData(CBObj.dataSource, query);
            }
        }

        var selected = [];
        function OnItemBegin(e) {
            this.fields = {
                text: 'NameAr', value: 'Oid', itemCreated: function (e) {
                    var count = 0;
                    if (count === 0) {
                        for (let i = 0; i < e.dataSource.length; i++) {
                            if (e.curData.IsSelected == true)
                                itemSearch(e.curData.Oid); //pass the corresponding value
                        }
                    }
                }
            }
        }

        function itemSearch(e) {
            if (selected.indexOf(e) == -1)
                selected.push(e);
        }

        function OnItemBound(e) {
            this.value = selected;
        }

        // ***********************  End Item Filtering and Searching  ***********************

        // ***********************  Unit Filtering and Searching  ***********************

        function OnUnitFiltering(e) {
            var CBObj = document.getElementById("unit").ej2_instances[0];
            if (e.text == '')
                e.updateData(CBObj.dataSource);
            else {
                var query = new ej.data.Query().from('unit').select(['NameAr', 'Oid']);
                query = (e.text !== '') ? query.where('NameAr', 'contains', e.text, true) : query;
                e.updateData(CBObj.dataSource, query);
            }
        }

        var selectedUnit = [];
        function OnUnitBegin(e) {
            this.fields = {
                text: 'NameAr', value: 'Oid', itemCreated: function (e) {
                    var count = 0;
                    if (count === 0) {
                        for (let i = 0; i < e.dataSource.length; i++) {
                            if (e.curData.IsSelected == true)
                                unitSearch(e.curData.Oid); //pass the corresponding value
                        }
                    }
                }
            }
        }

        function unitSearch(e) {
            if (selectedUnit.indexOf(e) == -1)
                selectedUnit.push(e);
        }

        function OnUnitBound(e) {
            this.value = selectedUnit;
        }

        // ***********************  End Unit Filtering and Searching  ***********************

        // ***********************  User Filtering and Searching  ***********************

        function OnUserFiltering(e) {
            var CBObj = document.getElementById("users").ej2_instances[0];
            if (e.text == '')
                e.updateData(CBObj.dataSource);
            else {
                var query = new ej.data.Query().from('users').select(['FullnameAr', 'Oid']);
                query = (e.text !== '') ? query.where('FullnameAr', 'contains', e.text, true) : query;
                e.updateData(CBObj.dataSource, query);
            }
        }

        var selectedUser = [];
        function OnUserBegin(e) {
            this.fields = {
                text: 'FullnameAr', value: 'Oid', itemCreated: function (e) {
                    var count = 0;
                    if (count === 0) {
                        for (let i = 0; i < e.dataSource.length; i++) {
                            if (e.curData.IsSelected == true)
                                UserSearch(e.curData.Oid); //pass the corresponding value
                        }
                    }
                }
            }
        }

        function UserSearch(e) {
            if (selectedUser.indexOf(e) == -1)
                selectedUser.push(e);
        }

        function OnUserBound(e) {
            this.value = selectedUser;
        }

        // ***********************  End User Filtering and Searching  ***********************


        // ***********************  Add To Grid  ***********************

        function AddToGrid() {
            var transDate = $('#transDate').val();
            // var transDate = document.getElementById('transDate').ej2_instances[0].value;

            var itemDataSource = document.getElementById('items').ej2_instances[0].dataSource;
            var item = document.getElementById('items').ej2_instances[0].value;

            var unitDataSource = document.getElementById('unit').ej2_instances[0].dataSource;
            var unit = document.getElementById('unit').ej2_instances[0].value;

            var quantity = document.getElementById('quantity').ej2_instances[0].value;

            if (item === null) {
                alert('Please Select atleast 1 item!');
            } else if (unit === null) {
                alert('Please Select Unit');
            } else if (quantity === null || quantity < 1) {
                alert('Invalid Quantity!');
            } else {
                // items.forEach(function (currentValue, index, arr) {

                    itemList.some(function (elem, i) {
                        if (elem.ItemId === item && elem.UnitId === unit) {
                            itemList.splice(i, 1);
                        }
                    });

                    var itemName = '';
                    itemDataSource.some(function (elem, i) {
                        if (elem.Oid === item) {
                            itemName = elem.NameAr;
                        }
                    });

                    var unitName = '';
                    unitDataSource.some(function (elem, i) {
                        if (elem.Oid === unit) {
                            unitName = elem.NameAr;
                        }
                    });

                    var item = {
                        'TransDate': transDate,
                        'ItemId': item,
                        'ItemName': itemName,
                        'UnitId': unit,
                        'UnitName': unitName,
                        'Quantity': quantity
                    };

                    itemList.push(item);
                // });

                console.log('Item List', itemList);
                CheckItemList();

                var grid = document.getElementById('Grid').ej2_instances[0];
                grid.dataSource = itemList;
                grid.refresh();
            }
        }

        // ***********************  End Add To Grid  ***********************


        function SaveItems() {

            var user = document.getElementById('users').ej2_instances[0].value;
            var comments = document.getElementById('comments').ej2_instances[0].value;

            if (user === null) {
                alert('Please Select User!');
            } else {

                $('.loading-text').html("Saving...");
                $('.loading-placeholder').show();
                $('.inv-grid-container').hide();

            if (itemList.length > 0) {

                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("SaveItems", "Home")',
                    data: {
                        itemList: itemList,
                        user: user,
                        comments: comments
                    },
                    success: function (response) {
                        console.log('response', response);

                        $('.modal-message').html(response.Message);
                        $('#response-message').modal('show');

                        if (response.ReponseId === 1) {
                            ClearGrid();
                            var itemList = [];

                            document.getElementById('transDate').ej2_instances[0].value = null;
                            document.getElementById('items').ej2_instances[0].value = null;
                            document.getElementById('unit').ej2_instances[0].value = null;
                            document.getElementById('quantity').ej2_instances[0].value = null;
                            document.getElementById('users').ej2_instances[0].value = null;
                            document.getElementById('comments').ej2_instances[0].value = null;

                            $('.loading-text').html("Printing...");
                            $('.loading-placeholder').hide();
                            $('.inv-grid-container').show();

                            //setTimeout(function () {
                            //        var r = confirm("Email has been sent. Do you want to print?");
                            //        if (r === true) {
                            //            window.location.href = '/Home/PrintItems?itemList=' + itemList;
                            //            $('.loading-placeholder').hide();
                            //            $('.inv-grid-container').show();
                            //        } else {
                            //            $('.loading-placeholder').hide();
                            //            $('.inv-grid-container').show();
                            //        }
                            //}, 2000);
                        }
                    },
                    error: function (ex) {
                        alert(ex);
                    }
                });

            } else {
                alert('Please add value to grid!');
                CheckItemList();
                }
            }
        }

        function ClearGrid() {
            itemList = [];
            CheckItemList();

            var grid = document.getElementById('Grid').ej2_instances[0];
            grid.dataSource = itemList;
            grid.refresh();
        }

        function OnItemChange(args) {
            var unit = document.getElementById('unit').ej2_instances[0];
            unit.value = args.itemData.Unit_Cd;
        }

        function createHandler(args) {
            var textareaObj = document.getElementById('comments').ej2_instances[0];
            textareaObj.addAttributes({ rows: 1 });
            this.respectiveElement.style.height = "auto";
            this.respectiveElement.style.height = (this.respectiveElement.scrollHeight) + "px";
        }
        function inputHandler(args) {
            this.respectiveElement.style.height = "auto";
            this.respectiveElement.style.height = (this.respectiveElement.scrollHeight) + "px";
        }


    </script>
}
