@model IEnumerable<ImillPda.ViewModels.TransactionVM>

@{
    ViewBag.Title = "Requests";

    List<object> commands = new List<object>();
    commands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "edit", name = "edit" } });
    commands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "delete mt-3 bg-danger", name = "delete" } });
}

<style>
    .e-grid .e-rowcell.customcss {
        font-size: 13px;
    }

    .e-grid .e-headercell.customcss {
        font-size: 11px;
    }

    .e-grid .e-summaryrow .e-summarycell, .e-grid .e-summaryrow .e-templatecell {
        font-size: 11px;
    }

    .e-headertext {
        font-size: 11px;
    }
</style>


<div class="container-fluid">
    <div class="row">
        <div class="col-12 mt-5">
            <label><input type='checkbox' onclick='handleClick(this);'> Show All</label>
        </div>

        <div class="col-12 mt-3">
            @Html.EJS().Grid("Grid").DataSource((IEnumerable<object>)ViewBag.DataSource).AllowTextWrap(true).AllowResizing(true).AllowExcelExport().Height("auto").Width("auto").ShowColumnChooser(true).Columns(col =>
            {
                col.Field("EntryId").Visible(false).ShowInColumnChooser(false).IsPrimaryKey(true).Add();
                col.Field("IsHidden").Visible(false).ShowInColumnChooser(true).Add();
                col.Field("ItemCount").Visible(false).ShowInColumnChooser(true).Add();
                col.Field("RequestNumber").Visible(false).ShowInColumnChooser(false).Add();
                col.Field("CustomDate").Visible(false).ShowInColumnChooser(false).Add();
                col.Field("CustomTime").Visible(false).ShowInColumnChooser(false).Add();
                col.Field("UserDateTime").HeaderText("Time").Visible(false).Format(new { type = "dateTime", format = "hh:mm:ss" }).ShowInColumnChooser(true).Add();
                col.Field("TransDate").Template("#templatedate").Width("70").HeaderText("Date").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Format(new { type = "dateTime", format = "dd/MMM/yy" }).CustomAttributes(new { @class = "customcss" }).Add();
                col.Field("Locat_Cd").Visible(false).ShowInColumnChooser(false).Add();
                col.Field("LocationNameEn").Visible(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                col.Field("LocationNameAr").Template("#template").HeaderText("Location").Width("120").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                col.HeaderText("Actions").HeaderText("A").Width("50").Commands(commands).Add();
            }).AllowPaging(true).AllowSorting(true).AllowFiltering().CommandClick("commandClick").FilterSettings(filter => filter.Type(Syncfusion.EJ2.Grids.FilterType.Menu)).PageSettings(
                page => { page.PageSizes(true); page.PageSize(25); }).Toolbar(new List<string>() { "Search", "ColumnChooser" }).Render()

            <script id="template" type="text/x-template">

                ${if(IsHidden)}
                    <section class="bg-warning">
                        <label>${RequestNumber}</label>
                        <hr style="margin: 1px 0 5px;" />
                        <label>${LocationNameAr}</label>
                    </section>
                ${else}
                    <label>${RequestNumber}</label>
                    <hr style="margin: 1px 0 5px;" />
                    <label>${LocationNameAr}</label> ${/if}

            </script>

            <script id="templatedate" type="text/x-template">

                <label>${CustomDate}</label>
                <hr style="margin: 1px 0 5px;" />
                <label>${CustomTime}</label>
            </script>




        </div>
    </div>
</div>


@section scripts{
    <script>
        let itemList = [];
        @*function RecordClick(args) {
            console.log("Args : ", args.rowData.EntryId);
            var link = "@Url.Action("GetTransactionDetails", "Home", new { entryId = -1 })";
            link = link.replace('-1', args.rowData.EntryId);
            window.location.href = link;
        }*@

        $(document).ready(function () {
           //let grid = document.getElementById('Grid').ej2_instances[0];
           // itemList = grid.dataSource;
           // grid.dataSource = itemList.filter(x => x.IsHidden == false);
           // grid.refresh();
        });

        function commandClick(args) {
            let type = args.commandColumn.type;
            if (type === 'Edit') {
                let link = "@Url.Action("GetTransactionDetails", "Home", new { entryId = -1 })";
                link = link.replace('-1', args.rowData.EntryId);
                window.location.href = link;
            }

            if (type === 'Delete') {
                let entryId = args.rowData.EntryId;

                let confirm = window.confirm("Are You Sure, You want to delete?");

                if (confirm) {
                    $.ajax({
                        type: 'POST',
                        data: {
                            EntryId: entryId
                        },
                        url: '@Url.Action("DeleteTransaction", "Home")',
                        success: function (response) {
                            alert(response.Message);
                            if (response.ReponseId === 1) {
                                window.location.reload();
                            } else {
                                alert("error in deleting request!")
                            }
                        },
                        error: function (ex) {
                            console.log(ex);
                            alert("Error Occured While Saving! " + ex);
                        }
                    });
                }
            }
        }

        function handleClick(cb) {
            // cb.checked
            let grid = document.getElementById('Grid').ej2_instances[0];
            if(cb.checked){
                grid.dataSource = itemList;
                grid.refresh();
                // console.log('Item Check On : ', grid.dataSource);
            }

            if(!cb.checked){
                grid.dataSource = itemList.filter(x => x.IsHidden == false);
                grid.refresh();
                // console.log('Item Check Off : ', grid.dataSource);
            }
        }

    </script>
}