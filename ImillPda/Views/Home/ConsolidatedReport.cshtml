@using Syncfusion.EJ2.Grids;
@using Syncfusion.EJ2.DropDowns

@{
    ViewBag.Title = "Consolidated Report";
}

<style>
    .e-grid .e-rowcell.customcss {
        font-size: 13px;
    }

    .e-grid .e-headercell.customcss {
        font-size: 11px;
    }

    .e-grid .e-summaryrow .e-summarycell, .e-grid .e-summaryrow .e-templatecell {
        font-size: 11px;
    }

    .e-headertext {
        font-size: 11px;
    }
</style>

<div class="container-fluid">
    <div class="row clearfix">
        <div class="col-12">

            <div class="card mt-5">
                <div class="row pt-3 pb-0 px-3 mb-0">
                    <div class="col-lg-2">
                        @Html.EJS().DatePicker("fromDate").Format("dd/MMM/yyyy").Placeholder("Date").Value(ViewBag.startDate).Render()
                    </div>

                    <div class="col-lg-2">
                        @Html.EJS().DropDownList("reporttype").Placeholder("Select a Type").PopupHeight("220px").DataSource(
                       (IEnumerable<object>)ViewBag.ConsReportType).Fields(new DropDownListFieldSettings { Text = "NameEn", Value = "Id" }).Render()
                    </div>

                    <div class="col-lg-3 mt-4 mt-lg-0">
                        @Html.EJS().MultiSelect("group").ShowDropDownIcon().Change("OnGroupChange").AllowFiltering(true).Filtering("onGroupFiltering").Placeholder("Select Groups").DataSource(
                       (IEnumerable<object>)ViewBag.groups
                       ).Mode(Syncfusion.EJ2.DropDowns.VisualMode.CheckBox).ShowSelectAll(true).SelectAllText("Select All").UnSelectAllText("UnSelect All").Fields(
                       new Syncfusion.EJ2.DropDowns.MultiSelectFieldSettings { Text = "NameAr", Value = "ItemGroupId" }).ActionBegin("onGroupBegin").DataBound("onGroupBound").Render()
                    </div>

                    <div class="col-lg-1 mt-4 mt-lg-2 px-0 text-center">
                        <div class="form-group form-check">
                            <input type="checkbox" class="form-check-input" id="isChecked">
                            <label class="form-check-label" for="isChecked">Prod(En)</label>
                        </div>
                    </div>

                    <div class="col-lg-3 prodEn">
                        @Html.EJS().MultiSelect("productStringArray").ShowDropDownIcon().AllowFiltering(true).Filtering("onfiltering").Placeholder("Select Products").DataSource(
                       (IEnumerable<object>)ViewBag.products
                       ).Mode(Syncfusion.EJ2.DropDowns.VisualMode.CheckBox).ShowSelectAll(true).SelectAllText("Select All").UnSelectAllText("UnSelect All").Fields(
                       new Syncfusion.EJ2.DropDowns.MultiSelectFieldSettings { Text = "Name", Value = "ProductId" }).ActionBegin("onProductBegin").DataBound("onProductBound").Render()
                    </div>

                    <div class="col-lg-3 prodAr">
                        @Html.EJS().MultiSelect("productArStringArray").ShowDropDownIcon().AllowFiltering(true).Filtering("onfilteringAr").EnableRtl(true).Placeholder("اختر المنتجات").DataSource(
                        (IEnumerable<object>
                            )ViewBag.products
                            ).Mode(Syncfusion.EJ2.DropDowns.VisualMode.CheckBox).ShowSelectAll(true).SelectAllText("Select All").UnSelectAllText("UnSelect All").Fields(
                            new Syncfusion.EJ2.DropDowns.MultiSelectFieldSettings { Text = "NameAr", Value = "ProductId" }).ActionBegin("onProductArBegin").DataBound("onProductArBound").Render()
                    </div>

                </div>

                <div class="row">
                    <div class="col-6 col-lg-12 my-3 mb-lg-3 text-center mx-auto mx-lg-0">
                        <button type="button" class="btn btn-dark btn-raised waves-effect waves-light getRecords">Get Records</button>
                    </div>
                </div>

            </div>

            <div class="card mt-3">
                <div class="body">
                    <div class="preloader loading">
                        <span class="slice"></span>
                        <span class="slice"></span>
                        <span class="slice"></span>
                        <span class="slice"></span>
                        <span class="slice"></span>
                        <span class="slice"></span>
                    </div>
                    <h5 class="text-center loading-text mt-2">Loading...</h5>

                    @Html.EJS().Grid("Grid").DataSource((IEnumerable<object>)ViewBag.DataSource).EnablePersistence(false).AllowResizing(true).AllowExcelExport().ToolbarClick(
                   "toolbarClick").Height("400").Width("auto").ShowColumnChooser(true).Columns(col =>
               {
                   col.Field("IsVerified").HeaderText("").Type("checkbox").Width("60").AllowFiltering(false).AllowSorting(false).Add();
                   col.Field("LocationNameAr").HeaderText("Location").Width("100").TextAlign(TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("ProductNameEn").HeaderText("Prod (En)").Width("100").TextAlign(TextAlign.Center).Filter(new { type = "Menu" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("ProductNameAr").HeaderText("Prod (Ar)").Width("100").TextAlign(TextAlign.Center).Filter(new { type = "Menu" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("TotalQuantity").Width("80").Format("N3").TextAlign(TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();

               }).AllowPaging(true).AllowSorting(true).AllowFiltering().FilterSettings(filter => filter.Type(Syncfusion.EJ2.Grids.FilterType.Menu)).PageSettings(
                   page => { page.PageSizes(true); page.PageSize(25); }).Toolbar(new List<string>() { "Search", "Print", "ExcelExport", "ColumnChooser" }).Aggregates(agg =>
                        {
                       agg.Columns(new List<GridAggregateColumn>() {
                           new GridAggregateColumn() {
                               Field = "TotalQuantity", Format= "N3", Type = "Sum", FooterTemplate = "${Sum}"
                           } }).Add();
                        }).DataBound("dataBound").RowSelected("OnSelected").AllowSelection(true).SelectionSettings(select => select.Type(Syncfusion.EJ2.Grids.SelectionType.Multiple).CheckboxOnly(true)).Load("load").Render()




                    @Html.EJS().Grid("Grid2").DataSource((IEnumerable<object>)ViewBag.DataSource).EnablePersistence(false).AllowResizing(true).AllowExcelExport().ToolbarClick(
                   "toolbarClick").Height("400").Width("auto").ShowColumnChooser(true).Columns(col =>
               {
                   col.Field("IsVerified").HeaderText("").Type("checkbox").Width("60").AllowFiltering(false).AllowSorting(false).Add();
                   col.Field("ProductNameEn").HeaderText("Prod (En)").Width("100").TextAlign(TextAlign.Center).Filter(new { type = "Menu" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("ProductNameAr").HeaderText("Prod (Ar)").Width("100").TextAlign(TextAlign.Center).Filter(new { type = "Menu" }).CustomAttributes(new { @class = "customcss" }).Add();
                   col.Field("TotalQuantity").Width("80").Format("N3").TextAlign(TextAlign.Center).Filter(new { type = "CheckBox" }).CustomAttributes(new { @class = "customcss" }).Add();

               }).AllowPaging(true).AllowSorting(true).AllowFiltering().FilterSettings(filter => filter.Type(Syncfusion.EJ2.Grids.FilterType.Menu)).PageSettings(
                   page => { page.PageSizes(true); page.PageSize(25); }).Toolbar(new List<string>() { "Search", "Print", "ExcelExport", "ColumnChooser" }).Aggregates(agg =>
                        {
                       agg.Columns(new List<GridAggregateColumn>() {
                           new GridAggregateColumn() {
                               Field = "TotalQuantity", Format= "N3", Type = "Sum", FooterTemplate = "${Sum}"
                           } }).Add();
                        }).DataBound("dataBound").RowSelected("OnSelected").AllowSelection(true).SelectionSettings(select => select.Type(Syncfusion.EJ2.Grids.SelectionType.Multiple).CheckboxOnly(true)).Load("load").Render()

                </div>
            </div>



        </div>

        <div class="col-6 mx-auto">
            <button type="button" class="btn btn-lg btn-dark btn-block btn-raised waves-effect waves-light saveRecords my-5">Save</button>
        </div>

    </div>
</div>

@section scripts {
    <script>

        let grid;
        let itemList = [];
        $('.preloader').hide();
        $('.loading-text').hide();
        $('.prodEn').hide();
        $('#Grid2').hide();
        var prodEnCheck = false;
        let flag = true;

        function dataBound(args) {
            this.autoFitColumns(['ProductNameEn', 'ProductNameAr', 'TotalQuantity']);
        }

        function afterFilterOpen(args) {
            if (args.requestType == "filterafteropen" && (args.columnName == "ProductNameEn" || args.columnName == "ProductNameAr")) {
                args.filterModel.dlgDiv.querySelector('input').ej2_instances[0].value = 'contains';
            }
        }

        $('#isChecked').change(function () {
            if (this.checked) {
                $('.prodEn').show();
                $('.prodAr').hide();
                prodEnCheck = true;
            } else {
                $('.prodEn').hide();
                $('.prodAr').show();
                prodEnCheck = false;
            }
        });

        function load() {
            var grid = document.getElementById('Grid').ej2_instances[0];
            var rowHeight = grid.getRowHeight();  //height of the each row
            var gridHeight = grid.height;  //grid height
            var pageSize = grid.pageSettings.pageSize;   //initial page size
            var pageResize = 25; //new page size is obtained here
            grid.pageSettings.pageSize = pageSize + Math.round(pageResize);
        }

        function onfiltering(e) {
            var CBObj = document.getElementById("productStringArray").ej2_instances[0];
            if (e.text == '')
                e.updateData(CBObj.dataSource);
            else {
                var query = new ej.data.Query().from('productStringArray').select(['Name', 'ProductId']);
                query = (e.text !== '') ? query.where('Name', 'contains', e.text, true) : query;
                e.updateData(CBObj.dataSource, query);
            }
        }

        function onfilteringAr(e) {
            var CBObj = document.getElementById("productArStringArray").ej2_instances[0];
            if (e.text == '')
                e.updateData(CBObj.dataSource);
            else {
                var query = new ej.data.Query().from('productArStringArray').select(['NameAr', 'ProductId']);
                query = (e.text !== '') ? query.where('NameAr', 'contains', e.text, true) : query;
                e.updateData(CBObj.dataSource, query);
            }
        }


        function onGroupFiltering(e) {
            var CBObj = document.getElementById("group").ej2_instances[0];
            if (e.text == '')
                e.updateData(CBObj.dataSource);
            else {
                var query = new ej.data.Query().from('group').select(['NameAr', 'ItemGroupId']);
                query = (e.text !== '') ? query.where('NameAr', 'contains', e.text, true) : query;
                e.updateData(CBObj.dataSource, query);
            }
        }


        function toolbarClick(args) {
            var gridObj = document.getElementById("Grid").ej2_instances[0];
            if (args.item.id === 'Grid_excelexport') {
                var excelExportProperties = {
                    fileName: "ConsolidatedReport.xlsx"
                };
                gridObj.excelExport(excelExportProperties);
            }
        }

        var selectedProduct = [];
        function onProductBegin(e) {
            this.fields = {
                text: 'Name', value: 'ProductId', itemCreated: function (e) {
                    var count = 0;
                    if (count === 0) {
                        for (let i = 0; i < e.dataSource.length; i++) {
                            if (e.curData.IsSelected == true)
                                itemProductSearch(e.curData.ProductId); //pass the corresponding value
                        }
                    }
                }
            }
        }

        function itemProductSearch(e) {
            if (selectedProduct.indexOf(e) == -1)
                selectedProduct.push(e);
        }

        function onProductBound(e) {
            this.value = selectedProduct;
        }

        var selectedProductAr = [];
        function onProductArBegin(e) {
            this.fields = {
                text: 'NameAr', value: 'ProductId', itemCreated: function (e) {
                    var count = 0;
                    if (count === 0) {
                        for (let i = 0; i < e.dataSource.length; i++) {
                            if (e.curData.IsSelected == true)
                                itemProductSearch(e.curData.ProductId); //pass the corresponding value
                        }
                    }
                }
            }
        }

        function itemProductArSearch(e) {
            if (selectedProductAr.indexOf(e) == -1)
                selectedProductAr.push(e);
        }

        function onProductArBound(e) {
            this.value = selectedProductAr;
        }


        var selectedGroup = [];
        function onGroupBegin(e) {
            this.fields = {
                text: 'NameAr', value: 'ItemGroupId', itemCreated: function (e) {
                    var count = 0;
                    if (count === 0) {
                        for (let i = 0; i < e.dataSource.length; i++) {
                            if (e.curData.IsSelected == true)
                                itemGroupSearch(e.curData.ItemGroupId);
                        }
                    }
                }
            }
        }

        function itemGroupSearch(e) {
            if (selectedGroup.indexOf(e) == -1)
                selectedGroup.push(e);
        }

        function onGroupBound(e) {
            this.value = selectedGroup;
        }

        function OnGroupChange(args) {

            var productArObj = document.getElementById('productArStringArray').ej2_instances[0];
            var productObj = document.getElementById('productStringArray').ej2_instances[0];

            $.ajax({
                type: 'POST',
                data: {
                    groupIds: args.value
                },
                url: '@Url.Action("GetProducts", "Home")',
                dataType: 'json',
                success: function (response) {

                    productObj.dataSource = response.Items;
                    productObj.refresh();

                    productArObj.dataSource = response.Items;
                    productArObj.refresh();

                },
                error: function (ex) {
                    alert(ex);
                    $('.preloader').hide();
                }

            });
        }




        $(".getRecords").click(function () {

            var i = 1;
            setInterval(function () {
                i++;
            }, 1000);

            $('.preloader').show();
            $('.loading-text').show();
            $('#Grid').hide();
            $('#Grid2').hide();

            var fromDate = $('#fromDate').val();

            var grid = document.getElementById('Grid').ej2_instances[0];
            var productObj = document.getElementById('productStringArray').ej2_instances[0];
            var productArObj = document.getElementById('productArStringArray').ej2_instances[0];
            var groupObj = document.getElementById('group').ej2_instances[0];
            var typeObj = document.getElementById('reporttype').ej2_instances[0];

            if (typeObj.value === 2) {
                grid = document.getElementById('Grid2').ej2_instances[0];
            }

            $.ajax({
                type: 'POST',
                data: {
                    from: fromDate.toString(),
                    product: productObj.value != null ? productObj.value.toString() : '',
                    productAr: productArObj.value != null ? productArObj.value.toString() : '',
                    isChecked: prodEnCheck,
                    group: groupObj.value != null ? groupObj.value.toString() : '',
                    type: typeObj.value != null ? typeObj.value.toString() : '1'
                },
                url: '@Url.Action("GetConsolidatedItems", "Home")',
                dataType: 'json',
                success: function (response) {
                    console.log('Total Time Taken: ', i);
                    $('.preloader').hide();
                    $('.loading-text').hide();
                    if (typeObj.value === 2) {
                        $('#Grid2').show();
                    } else {
                        $('#Grid').show();
                    }

                    grid.dataSource = response;
                    grid.refresh();
                },
                error: function (ex) {
                    alert(ex);
                    $('.preloader').hide();
                }

            });
        });


        $(function () {

        });

        function OnSelected(args) {
            var typeObj = document.getElementById('reporttype').ej2_instances[0];
            if (typeObj.value === 2) {
                grid = document.getElementById('Grid2').ej2_instances[0];

                itemList = grid.dataSource;
                if (flag) {
                    var prodCd = args.data.Prod_Cd;

                    itemList.some(function (elem, i) {
                        if (elem.Prod_Cd === prodCd) {
                            if (elem.IsVerified) {
                                elem.IsVerified = false;
                            } else {
                                elem.IsVerified = true;
                            }
                        }
                    });

                    oid = 0;
                    grid.dataSource = itemList;
                    grid.refresh();
                } else {
                    flag = true;
                }

            } else {

                grid = document.getElementById('Grid').ej2_instances[0];

                itemList = grid.dataSource;
                if (flag) {
                    var locatCd = args.data.Locat_Cd;
                    var prodCd = args.data.Prod_Cd;

                    itemList.some(function (elem, i) {
                        if (elem.Locat_Cd === locatCd && elem.Prod_Cd === prodCd) {
                            if (elem.IsVerified) {
                                elem.IsVerified = false;
                            } else {
                                elem.IsVerified = true;
                            }
                        }
                    });

                    oid = 0;
                    grid.dataSource = itemList;
                    grid.refresh();
                } else {
                    flag = true;
                }

            }
        }

        $(".saveRecords").click(function () {

            var i = 1;
            setInterval(function () {
                i++;
            }, 1000);

            $('.preloader').show();
            $('.loading-text').show();
            $('.e-grid').hide();

            var fromDate = $('#fromDate').val();
            $.ajax({
                type: 'POST',
                data: {
                    from: fromDate.toString(),
                    consolidatedItems: itemList
                },
                url: '@Url.Action("SaveConsolidateTrans", "Home")',
                dataType: 'json',
                success: function (response) {
                    console.log(response);
                    console.log('Total Time in Saving : ', i);
                    $('.preloader').hide();
                    $('.loading-text').hide();
                    $('.e-grid').show();

                    alert("Transaction Updated!")
                },
                error: function (ex) {
                    alert(ex);
                    $('.preloader').hide();
                }

            });
        });

    </script>
}
